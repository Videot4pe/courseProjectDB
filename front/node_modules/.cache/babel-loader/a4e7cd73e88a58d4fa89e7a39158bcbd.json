{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _serverAddress = _interopRequireDefault(require(\"../server-address\"));\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction resolveToSelf(address) {\n  return Promise.resolve([address]);\n}\n\nvar ConfiguredCustomResolver =\n/*#__PURE__*/\nfunction () {\n  function ConfiguredCustomResolver(resolverFunction) {\n    (0, _classCallCheck2[\"default\"])(this, ConfiguredCustomResolver);\n    this._resolverFunction = resolverFunction || resolveToSelf;\n  }\n\n  (0, _createClass2[\"default\"])(ConfiguredCustomResolver, [{\n    key: \"resolve\",\n    value: function resolve(seedRouter) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        return resolve(_this._resolverFunction(seedRouter.asHostPort()));\n      }).then(function (resolved) {\n        if (!Array.isArray(resolved)) {\n          throw new TypeError(\"Configured resolver function should either return an array of addresses or a Promise resolved with an array of addresses.\" + \"Each address is '<host>:<port>'. Got: \".concat(resolved));\n        }\n\n        return resolved.map(function (r) {\n          return _serverAddress[\"default\"].fromUrl(r);\n        });\n      });\n    }\n  }]);\n  return ConfiguredCustomResolver;\n}();\n\nexports[\"default\"] = ConfiguredCustomResolver;","map":null,"metadata":{},"sourceType":"script"}