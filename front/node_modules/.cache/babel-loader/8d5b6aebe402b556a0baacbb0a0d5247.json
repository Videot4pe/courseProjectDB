{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _integer = require(\"../integer\");\n\nvar _driver = require(\"../driver\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar MIN_ROUTERS = 1;\n\nvar RoutingTable =\n/*#__PURE__*/\nfunction () {\n  function RoutingTable(routers, readers, writers, expirationTime) {\n    (0, _classCallCheck2[\"default\"])(this, RoutingTable);\n    this.routers = routers || [];\n    this.readers = readers || [];\n    this.writers = writers || [];\n    this.expirationTime = expirationTime || (0, _integer[\"int\"])(0);\n  }\n\n  (0, _createClass2[\"default\"])(RoutingTable, [{\n    key: \"forget\",\n    value: function forget(address) {\n      // Don't remove it from the set of routers, since that might mean we lose our ability to re-discover,\n      // just remove it from the set of readers and writers, so that we don't use it for actual work without\n      // performing discovery first.\n      this.readers = removeFromArray(this.readers, address);\n      this.writers = removeFromArray(this.writers, address);\n    }\n  }, {\n    key: \"forgetRouter\",\n    value: function forgetRouter(address) {\n      this.routers = removeFromArray(this.routers, address);\n    }\n  }, {\n    key: \"forgetWriter\",\n    value: function forgetWriter(address) {\n      this.writers = removeFromArray(this.writers, address);\n    }\n    /**\n     * Check if this routing table is fresh to perform the required operation.\n     * @param {string} accessMode the type of operation. Allowed values are {@link READ} and {@link WRITE}.\n     * @return {boolean} `true` when this table contains servers to serve the required operation, `false` otherwise.\n     */\n\n  }, {\n    key: \"isStaleFor\",\n    value: function isStaleFor(accessMode) {\n      return this.expirationTime.lessThan(Date.now()) || this.routers.length < MIN_ROUTERS || accessMode === _driver.READ && this.readers.length === 0 || accessMode === _driver.WRITE && this.writers.length === 0;\n    }\n  }, {\n    key: \"allServers\",\n    value: function allServers() {\n      return [].concat((0, _toConsumableArray2[\"default\"])(this.routers), (0, _toConsumableArray2[\"default\"])(this.readers), (0, _toConsumableArray2[\"default\"])(this.writers));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"RoutingTable[\" + \"expirationTime=\".concat(this.expirationTime, \", \") + \"currentTime=\".concat(Date.now(), \", \") + \"routers=[\".concat(this.routers, \"], \") + \"readers=[\".concat(this.readers, \"], \") + \"writers=[\".concat(this.writers, \"]]\");\n    }\n  }]);\n  return RoutingTable;\n}();\n/**\n * Remove all occurrences of the element in the array.\n * @param {Array} array the array to filter.\n * @param {object} element the element to remove.\n * @return {Array} new filtered array.\n */\n\n\nexports[\"default\"] = RoutingTable;\n\nfunction removeFromArray(array, element) {\n  return array.filter(function (item) {\n    return item.asKey() !== element.asKey();\n  });\n}","map":null,"metadata":{},"sourceType":"script"}