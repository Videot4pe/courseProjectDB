{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDuration = isDuration;\nexports.isLocalTime = isLocalTime;\nexports.isTime = isTime;\nexports.isDate = isDate;\nexports.isLocalDateTime = isLocalDateTime;\nexports.isDateTime = isDateTime;\nexports.DateTime = exports.LocalDateTime = exports.Date = exports.Time = exports.LocalTime = exports.Duration = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar util = _interopRequireWildcard(require(\"./internal/temporal-util\"));\n\nvar _util = require(\"./internal/util\");\n\nvar _error = require(\"./error\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n  value: true,\n  enumerable: false,\n  configurable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\nvar Duration =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {Integer|number} months the number of months for the new duration.\n   * @param {Integer|number} days the number of days for the new duration.\n   * @param {Integer|number} seconds the number of seconds for the new duration.\n   * @param {Integer|number} nanoseconds the number of nanoseconds for the new duration.\n   */\n  function Duration(months, days, seconds, nanoseconds) {\n    (0, _classCallCheck2[\"default\"])(this, Duration);\n    this.months = (0, _util.assertNumberOrInteger)(months, 'Months');\n    this.days = (0, _util.assertNumberOrInteger)(days, 'Days');\n    (0, _util.assertNumberOrInteger)(seconds, 'Seconds');\n    (0, _util.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n    this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n    this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n    Object.freeze(this);\n  }\n\n  (0, _createClass2[\"default\"])(Duration, [{\n    key: \"toString\",\n    value: function toString() {\n      return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n    }\n  }]);\n  return Duration;\n}();\n\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Duration} class.\n * @param {object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\n */\n\nfunction isDuration(obj) {\n  return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\n/**\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\n * Created `LocalTime` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\n\nvar LocalTime =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {Integer|number} hour the hour for the new local time.\n   * @param {Integer|number} minute the minute for the new local time.\n   * @param {Integer|number} second the second for the new local time.\n   * @param {Integer|number} nanosecond the nanosecond for the new local time.\n   */\n  function LocalTime(hour, minute, second, nanosecond) {\n    (0, _classCallCheck2[\"default\"])(this, LocalTime);\n    this.hour = util.assertValidHour(hour);\n    this.minute = util.assertValidMinute(minute);\n    this.second = util.assertValidSecond(second);\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\n   * Create a local time object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Year, month, day and time zone offset components of the given date are ignored.\n   * @param {global.Date} standardDate the standard JavaScript date to convert.\n   * @param {Integer|number|undefined} nanosecond the optional amount of nanoseconds.\n   * @return {LocalTime} new local time.\n   */\n\n\n  (0, _createClass2[\"default\"])(LocalTime, [{\n    key: \"toString\",\n    value: function toString() {\n      return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n    }\n  }], [{\n    key: \"fromStandardDate\",\n    value: function fromStandardDate(standardDate, nanosecond) {\n      verifyStandardDateAndNanos(standardDate, nanosecond);\n      return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond));\n    }\n  }]);\n  return LocalTime;\n}();\n\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalTime} class.\n * @param {object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\n */\n\nfunction isLocalTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\n/**\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\n * Created `Time` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\n\nvar Time =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {Integer|number} hour the hour for the new local time.\n   * @param {Integer|number} minute the minute for the new local time.\n   * @param {Integer|number} second the second for the new local time.\n   * @param {Integer|number} nanosecond the nanosecond for the new local time.\n   * @param {Integer|number} timeZoneOffsetSeconds the time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n   */\n  function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n    (0, _classCallCheck2[\"default\"])(this, Time);\n    this.hour = util.assertValidHour(hour);\n    this.minute = util.assertValidMinute(minute);\n    this.second = util.assertValidSecond(second);\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    this.timeZoneOffsetSeconds = (0, _util.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    Object.freeze(this);\n  }\n  /**\n   * Create a time object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Year, month and day components of the given date are ignored.\n   * @param {global.Date} standardDate the standard JavaScript date to convert.\n   * @param {Integer|number|undefined} nanosecond the optional amount of nanoseconds.\n   * @return {Time} new time.\n   */\n\n\n  (0, _createClass2[\"default\"])(Time, [{\n    key: \"toString\",\n    value: function toString() {\n      return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\n    }\n  }], [{\n    key: \"fromStandardDate\",\n    value: function fromStandardDate(standardDate, nanosecond) {\n      verifyStandardDateAndNanos(standardDate, nanosecond);\n      return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond), util.timeZoneOffsetInSeconds(standardDate));\n    }\n  }]);\n  return Time;\n}();\n\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Time} class.\n * @param {object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\n */\n\nfunction isTime(obj) {\n  return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\n/**\n * Represents an instant capturing the date, but not the time, nor the timezone.\n * Created `Date` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\n\nvar Date =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {Integer|number} year the year for the new local date.\n   * @param {Integer|number} month the month for the new local date.\n   * @param {Integer|number} day the day for the new local date.\n   */\n  function Date(year, month, day) {\n    (0, _classCallCheck2[\"default\"])(this, Date);\n    this.year = util.assertValidYear(year);\n    this.month = util.assertValidMonth(month);\n    this.day = util.assertValidDay(day);\n    Object.freeze(this);\n  }\n  /**\n   * Create a date object from the given standard JavaScript `Date`.\n   * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\n   * @param {global.Date} standardDate the standard JavaScript date to convert.\n   * @return {Date} new date.\n   */\n\n\n  (0, _createClass2[\"default\"])(Date, [{\n    key: \"toString\",\n    value: function toString() {\n      return util.dateToIsoString(this.year, this.month, this.day);\n    }\n  }], [{\n    key: \"fromStandardDate\",\n    value: function fromStandardDate(standardDate) {\n      verifyStandardDateAndNanos(standardDate, null);\n      return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n    }\n  }]);\n  return Date;\n}();\n\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Date} class.\n * @param {object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\n */\n\nfunction isDate(obj) {\n  return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\n/**\n * Represents an instant capturing the date and the time, but not the timezone.\n * Created `LocalDateTime` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\n\nvar LocalDateTime =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {Integer|number} year the year for the new local date.\n   * @param {Integer|number} month the month for the new local date.\n   * @param {Integer|number} day the day for the new local date.\n   * @param {Integer|number} hour the hour for the new local time.\n   * @param {Integer|number} minute the minute for the new local time.\n   * @param {Integer|number} second the second for the new local time.\n   * @param {Integer|number} nanosecond the nanosecond for the new local time.\n   */\n  function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n    (0, _classCallCheck2[\"default\"])(this, LocalDateTime);\n    this.year = util.assertValidYear(year);\n    this.month = util.assertValidMonth(month);\n    this.day = util.assertValidDay(day);\n    this.hour = util.assertValidHour(hour);\n    this.minute = util.assertValidMinute(minute);\n    this.second = util.assertValidSecond(second);\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\n   * Create a local date-time object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Time zone offset component of the given date is ignored.\n   * @param {global.Date} standardDate the standard JavaScript date to convert.\n   * @param {Integer|number|undefined} nanosecond the optional amount of nanoseconds.\n   * @return {LocalDateTime} new local date-time.\n   */\n\n\n  (0, _createClass2[\"default\"])(LocalDateTime, [{\n    key: \"toString\",\n    value: function toString() {\n      return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    }\n  }], [{\n    key: \"fromStandardDate\",\n    value: function fromStandardDate(standardDate, nanosecond) {\n      verifyStandardDateAndNanos(standardDate, nanosecond);\n      return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond));\n    }\n  }]);\n  return LocalDateTime;\n}();\n\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalDateTime} class.\n * @param {object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\n */\n\nfunction isLocalDateTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\n/**\n * Represents an instant capturing the date, the time and the timezone identifier.\n * Created `DateTime` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\n\nvar DateTime =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {Integer|number} year the year for the new date-time.\n   * @param {Integer|number} month the month for the new date-time.\n   * @param {Integer|number} day the day for the new date-time.\n   * @param {Integer|number} hour the hour for the new date-time.\n   * @param {Integer|number} minute the minute for the new date-time.\n   * @param {Integer|number} second the second for the new date-time.\n   * @param {Integer|number} nanosecond the nanosecond for the new date-time.\n   * @param {Integer|number} timeZoneOffsetSeconds the time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\n   * Value represents the difference, in seconds, from UTC to local time.\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n   * @param {string|null} timeZoneId the time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\n   */\n  function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n    (0, _classCallCheck2[\"default\"])(this, DateTime);\n    this.year = util.assertValidYear(year);\n    this.month = util.assertValidMonth(month);\n    this.day = util.assertValidDay(day);\n    this.hour = util.assertValidHour(hour);\n    this.minute = util.assertValidMinute(minute);\n    this.second = util.assertValidSecond(second);\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n\n    var _verifyTimeZoneArgume = verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId),\n        _verifyTimeZoneArgume2 = (0, _slicedToArray2[\"default\"])(_verifyTimeZoneArgume, 2),\n        offset = _verifyTimeZoneArgume2[0],\n        id = _verifyTimeZoneArgume2[1];\n\n    this.timeZoneOffsetSeconds = offset;\n    this.timeZoneId = id;\n    Object.freeze(this);\n  }\n  /**\n   * Create a date-time object from the given standard JavaScript `Date` and optional nanoseconds.\n   * @param {global.Date} standardDate the standard JavaScript date to convert.\n   * @param {Integer|number|undefined} nanosecond the optional amount of nanoseconds.\n   * @return {DateTime} new date-time.\n   */\n\n\n  (0, _createClass2[\"default\"])(DateTime, [{\n    key: \"toString\",\n    value: function toString() {\n      var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n      var timeZoneStr = this.timeZoneId ? \"[\".concat(this.timeZoneId, \"]\") : util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\n      return localDateTimeStr + timeZoneStr;\n    }\n  }], [{\n    key: \"fromStandardDate\",\n    value: function fromStandardDate(standardDate, nanosecond) {\n      verifyStandardDateAndNanos(standardDate, nanosecond);\n      return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond), util.timeZoneOffsetInSeconds(standardDate), null\n      /* no time zone id */\n      );\n    }\n  }]);\n  return DateTime;\n}();\n\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link DateTime} class.\n * @param {object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\n */\n\nfunction isDateTime(obj) {\n  return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\n\nfunction hasIdentifierProperty(obj, property) {\n  return (obj && obj[property]) === true;\n}\n\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n  return util.dateToIsoString(year, month, day) + 'T' + util.timeToIsoString(hour, minute, second, nanosecond);\n}\n\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n  var offsetDefined = timeZoneOffsetSeconds || timeZoneOffsetSeconds === 0;\n  var idDefined = timeZoneId && timeZoneId !== '';\n\n  if (offsetDefined && !idDefined) {\n    (0, _util.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    return [timeZoneOffsetSeconds, null];\n  } else if (!offsetDefined && idDefined) {\n    (0, _util.assertString)(timeZoneId, 'Time zone ID');\n    return [null, timeZoneId];\n  } else if (offsetDefined && idDefined) {\n    throw (0, _error.newError)(\"Unable to create DateTime with both time zone offset and id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\n  } else {\n    throw (0, _error.newError)(\"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\n  }\n}\n\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n  (0, _util.assertValidDate)(standardDate, 'Standard date');\n\n  if (nanosecond !== null && nanosecond !== undefined) {\n    (0, _util.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}