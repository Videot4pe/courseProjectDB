{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.statementType = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _integer = require(\"./integer\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\n\n\nvar ResultSummary =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {string} statement - The statement this summary is for\n   * @param {Object} parameters - Parameters for the statement\n   * @param {Object} metadata - Statement metadata\n   */\n  function ResultSummary(statement, parameters, metadata) {\n    (0, _classCallCheck2[\"default\"])(this, ResultSummary);\n    /**\n     * The statement and parameters this summary is for.\n     * @type {{text: string, parameters: Object}}\n     * @public\n     */\n\n    this.statement = {\n      text: statement,\n      parameters: parameters\n      /**\n       * The type of statement executed. Can be \"r\" for read-only statement, \"rw\" for read-write statement,\n       * \"w\" for write-only statement and \"s\" for schema-write statement.\n       * String constants are available in {@link statementType} object.\n       * @type {string}\n       * @public\n       */\n\n    };\n    this.statementType = metadata.type;\n    /**\n     * Counters for operations the statement triggered.\n     * @type {StatementStatistics}\n     * @public\n     */\n\n    this.counters = new StatementStatistics(metadata.stats || {}); // for backwards compatibility, remove in future version\n\n    this.updateStatistics = this.counters;\n    /**\n     * This describes how the database will execute the statement.\n     * Statement plan for the executed statement if available, otherwise undefined.\n     * Will only be populated for queries that start with \"EXPLAIN\".\n     * @type {Plan}\n     */\n\n    this.plan = metadata.plan || metadata.profile ? new Plan(metadata.plan || metadata.profile) : false;\n    /**\n     * This describes how the database did execute your statement. This will contain detailed information about what\n     * each step of the plan did. Profiled statement plan for the executed statement if available, otherwise undefined.\n     * Will only be populated for queries that start with \"PROFILE\".\n     * @type {ProfiledPlan}\n     * @public\n     */\n\n    this.profile = metadata.profile ? new ProfiledPlan(metadata.profile) : false;\n    /**\n     * An array of notifications that might arise when executing the statement. Notifications can be warnings about\n     * problematic statements or other valuable information that can be presented in a client. Unlike failures\n     * or errors, notifications do not affect the execution of a statement.\n     * @type {Array<Notification>}\n     * @public\n     */\n\n    this.notifications = this._buildNotifications(metadata.notifications);\n    /**\n     * The basic information of the server where the result is obtained from.\n     * @type {ServerInfo}\n     * @public\n     */\n\n    this.server = new ServerInfo(metadata.server);\n    /**\n     * The time it took the server to consume the result.\n     * @type {number}\n     * @public\n     */\n\n    this.resultConsumedAfter = metadata.result_consumed_after;\n    /**\n     * The time it took the server to make the result available for consumption in milliseconds.\n     * @type {number}\n     * @public\n     */\n\n    this.resultAvailableAfter = metadata.result_available_after;\n  }\n\n  (0, _createClass2[\"default\"])(ResultSummary, [{\n    key: \"_buildNotifications\",\n    value: function _buildNotifications(notifications) {\n      if (!notifications) {\n        return [];\n      }\n\n      return notifications.map(function (n) {\n        return new Notification(n);\n      });\n    }\n    /**\n     * Check if the result summary has a plan\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"hasPlan\",\n    value: function hasPlan() {\n      return this.plan instanceof Plan;\n    }\n    /**\n     * Check if the result summary has a profile\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"hasProfile\",\n    value: function hasProfile() {\n      return this.profile instanceof ProfiledPlan;\n    }\n  }]);\n  return ResultSummary;\n}();\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\n\n\nvar Plan =\n/**\n * Create a Plan instance\n * @constructor\n * @param {Object} plan - Object with plan data\n */\nfunction Plan(plan) {\n  (0, _classCallCheck2[\"default\"])(this, Plan);\n  this.operatorType = plan.operatorType;\n  this.identifiers = plan.identifiers;\n  this.arguments = plan.args;\n  this.children = plan.children ? plan.children.map(function (child) {\n    return new Plan(child);\n  }) : [];\n};\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\n\n\nvar ProfiledPlan =\n/**\n * Create a ProfiledPlan instance\n * @constructor\n * @param {Object} profile - Object with profile data\n */\nfunction ProfiledPlan(profile) {\n  (0, _classCallCheck2[\"default\"])(this, ProfiledPlan);\n  this.operatorType = profile.operatorType;\n  this.identifiers = profile.identifiers;\n  this.arguments = profile.args;\n  this.dbHits = intValue(profile.args.DbHits);\n  this.rows = intValue(profile.args.Rows);\n  this.children = profile.children ? profile.children.map(function (child) {\n    return new ProfiledPlan(child);\n  }) : [];\n};\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\n\n\nvar StatementStatistics =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Structurize the statistics\n   * @constructor\n   * @param {Object} statistics - Result statistics\n   */\n  function StatementStatistics(statistics) {\n    var _this = this;\n\n    (0, _classCallCheck2[\"default\"])(this, StatementStatistics);\n    this._stats = {\n      nodesCreated: 0,\n      nodesDeleted: 0,\n      relationshipsCreated: 0,\n      relationshipsDeleted: 0,\n      propertiesSet: 0,\n      labelsAdded: 0,\n      labelsRemoved: 0,\n      indexesAdded: 0,\n      indexesRemoved: 0,\n      constraintsAdded: 0,\n      constraintsRemoved: 0\n    };\n    Object.keys(statistics).forEach(function (index) {\n      // To camelCase\n      _this._stats[index.replace(/(-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      })] = intValue(statistics[index]);\n    });\n  }\n  /**\n   * Did the database get updated?\n   * @return {boolean}\n   */\n\n\n  (0, _createClass2[\"default\"])(StatementStatistics, [{\n    key: \"containsUpdates\",\n    value: function containsUpdates() {\n      var _this2 = this;\n\n      return Object.keys(this._stats).reduce(function (last, current) {\n        return last + _this2._stats[current];\n      }, 0) > 0;\n    }\n    /**\n     * @return {Number} - Number of nodes created.\n     */\n\n  }, {\n    key: \"nodesCreated\",\n    value: function nodesCreated() {\n      return this._stats.nodesCreated;\n    }\n    /**\n     * @return {Number} - Number of nodes deleted.\n     */\n\n  }, {\n    key: \"nodesDeleted\",\n    value: function nodesDeleted() {\n      return this._stats.nodesDeleted;\n    }\n    /**\n     * @return {Number} - Number of relationships created.\n     */\n\n  }, {\n    key: \"relationshipsCreated\",\n    value: function relationshipsCreated() {\n      return this._stats.relationshipsCreated;\n    }\n    /**\n     * @return {Number} - Number of nodes deleted.\n     */\n\n  }, {\n    key: \"relationshipsDeleted\",\n    value: function relationshipsDeleted() {\n      return this._stats.relationshipsDeleted;\n    }\n    /**\n     * @return {Number} - Number of properties set.\n     */\n\n  }, {\n    key: \"propertiesSet\",\n    value: function propertiesSet() {\n      return this._stats.propertiesSet;\n    }\n    /**\n     * @return {Number} - Number of labels added.\n     */\n\n  }, {\n    key: \"labelsAdded\",\n    value: function labelsAdded() {\n      return this._stats.labelsAdded;\n    }\n    /**\n     * @return {Number} - Number of labels removed.\n     */\n\n  }, {\n    key: \"labelsRemoved\",\n    value: function labelsRemoved() {\n      return this._stats.labelsRemoved;\n    }\n    /**\n     * @return {Number} - Number of indexes added.\n     */\n\n  }, {\n    key: \"indexesAdded\",\n    value: function indexesAdded() {\n      return this._stats.indexesAdded;\n    }\n    /**\n     * @return {Number} - Number of indexes removed.\n     */\n\n  }, {\n    key: \"indexesRemoved\",\n    value: function indexesRemoved() {\n      return this._stats.indexesRemoved;\n    }\n    /**\n     * @return {Number} - Number of constraints added.\n     */\n\n  }, {\n    key: \"constraintsAdded\",\n    value: function constraintsAdded() {\n      return this._stats.constraintsAdded;\n    }\n    /**\n     * @return {Number} - Number of constraints removed.\n     */\n\n  }, {\n    key: \"constraintsRemoved\",\n    value: function constraintsRemoved() {\n      return this._stats.constraintsRemoved;\n    }\n  }]);\n  return StatementStatistics;\n}();\n/**\n * Class for Cypher notifications\n * @access public\n */\n\n\nvar Notification =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a Notification instance\n   * @constructor\n   * @param {Object} notification - Object with notification data\n   */\n  function Notification(notification) {\n    (0, _classCallCheck2[\"default\"])(this, Notification);\n    this.code = notification.code;\n    this.title = notification.title;\n    this.description = notification.description;\n    this.severity = notification.severity;\n    this.position = Notification._constructPosition(notification.position);\n  }\n\n  (0, _createClass2[\"default\"])(Notification, null, [{\n    key: \"_constructPosition\",\n    value: function _constructPosition(pos) {\n      if (!pos) {\n        return {};\n      }\n\n      return {\n        offset: intValue(pos.offset),\n        line: intValue(pos.line),\n        column: intValue(pos.column)\n      };\n    }\n  }]);\n  return Notification;\n}();\n/**\n * Class for exposing server info from a result.\n * @access public\n */\n\n\nvar ServerInfo =\n/**\n * Create a ServerInfo instance\n * @constructor\n * @param {Object} serverMeta - Object with serverMeta data\n */\nfunction ServerInfo(serverMeta) {\n  (0, _classCallCheck2[\"default\"])(this, ServerInfo);\n\n  if (serverMeta) {\n    this.address = serverMeta.address;\n    this.version = serverMeta.version;\n  }\n};\n\nfunction intValue(value) {\n  return (0, _integer.isInt)(value) ? value.toInt() : value;\n}\n\nvar statementType = {\n  READ_ONLY: 'r',\n  READ_WRITE: 'rw',\n  WRITE_ONLY: 'w',\n  SCHEMA_WRITE: 's'\n};\nexports.statementType = statementType;\nvar _default = ResultSummary;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}