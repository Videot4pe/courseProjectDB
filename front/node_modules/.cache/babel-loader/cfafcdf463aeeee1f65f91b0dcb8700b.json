{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Dechunker = exports.Chunker = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _baseBuf = _interopRequireDefault(require(\"./buf/base-buf\"));\n\nvar _node = require(\"./node\");\n\nvar _combinedBuf = _interopRequireDefault(require(\"./buf/combined-buf\"));\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar _CHUNK_HEADER_SIZE = 2;\nvar _MESSAGE_BOUNDARY = 0x00;\nvar _DEFAULT_BUFFER_SIZE = 1400; // http://stackoverflow.com/questions/2613734/maximum-packet-size-for-a-tcp-connection\n\n/**\n * Looks like a writable buffer, chunks output transparently into a channel below.\n * @access private\n */\n\nvar Chunker =\n/*#__PURE__*/\nfunction (_BaseBuffer) {\n  (0, _inherits2[\"default\"])(Chunker, _BaseBuffer);\n\n  function Chunker(channel, bufferSize) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Chunker);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Chunker).call(this, 0));\n    _this._bufferSize = bufferSize || _DEFAULT_BUFFER_SIZE;\n    _this._ch = channel;\n    _this._buffer = (0, _node.alloc)(_this._bufferSize);\n    _this._currentChunkStart = 0;\n    _this._chunkOpen = false;\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Chunker, [{\n    key: \"putUInt8\",\n    value: function putUInt8(position, val) {\n      this._ensure(1);\n\n      this._buffer.writeUInt8(val);\n    }\n  }, {\n    key: \"putInt8\",\n    value: function putInt8(position, val) {\n      this._ensure(1);\n\n      this._buffer.writeInt8(val);\n    }\n  }, {\n    key: \"putFloat64\",\n    value: function putFloat64(position, val) {\n      this._ensure(8);\n\n      this._buffer.writeFloat64(val);\n    }\n  }, {\n    key: \"putBytes\",\n    value: function putBytes(position, data) {\n      // TODO: If data is larger than our chunk size or so, we're very likely better off just passing this buffer on\n      // rather than doing the copy here TODO: *however* note that we need some way to find out when the data has been\n      // written (and thus the buffer can be re-used) if we take that approach\n      while (data.remaining() > 0) {\n        // Ensure there is an open chunk, and that it has at least one byte of space left\n        this._ensure(1);\n\n        if (this._buffer.remaining() > data.remaining()) {\n          this._buffer.writeBytes(data);\n        } else {\n          this._buffer.writeBytes(data.readSlice(this._buffer.remaining()));\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (this._buffer.position > 0) {\n        this._closeChunkIfOpen(); // Local copy and clear the buffer field. This ensures that the buffer is not re-released if the flush call fails\n\n\n        var out = this._buffer;\n        this._buffer = null;\n\n        this._ch.write(out.getSlice(0, out.position)); // Alloc a new output buffer. We assume we're using NodeJS's buffer pooling under the hood here!\n\n\n        this._buffer = (0, _node.alloc)(this._bufferSize);\n        this._chunkOpen = false;\n      }\n\n      return this;\n    }\n    /**\n     * Bolt messages are encoded in one or more chunks, and the boundary between two messages\n     * is encoded as a 0-length chunk, `00 00`. This inserts such a message boundary, closing\n     * any currently open chunk as needed\n     */\n\n  }, {\n    key: \"messageBoundary\",\n    value: function messageBoundary() {\n      this._closeChunkIfOpen();\n\n      if (this._buffer.remaining() < _CHUNK_HEADER_SIZE) {\n        this.flush();\n      } // Write message boundary\n\n\n      this._buffer.writeInt16(_MESSAGE_BOUNDARY);\n    }\n    /** Ensure at least the given size is available for writing */\n\n  }, {\n    key: \"_ensure\",\n    value: function _ensure(size) {\n      var toWriteSize = this._chunkOpen ? size : size + _CHUNK_HEADER_SIZE;\n\n      if (this._buffer.remaining() < toWriteSize) {\n        this.flush();\n      }\n\n      if (!this._chunkOpen) {\n        this._currentChunkStart = this._buffer.position;\n        this._buffer.position = this._buffer.position + _CHUNK_HEADER_SIZE;\n        this._chunkOpen = true;\n      }\n    }\n  }, {\n    key: \"_closeChunkIfOpen\",\n    value: function _closeChunkIfOpen() {\n      if (this._chunkOpen) {\n        var chunkSize = this._buffer.position - (this._currentChunkStart + _CHUNK_HEADER_SIZE);\n\n        this._buffer.putUInt16(this._currentChunkStart, chunkSize);\n\n        this._chunkOpen = false;\n      }\n    }\n  }]);\n  return Chunker;\n}(_baseBuf[\"default\"]);\n/**\n * Combines chunks until a complete message is gathered up, and then forwards that\n * message to an 'onmessage' listener.\n * @access private\n */\n\n\nexports.Chunker = Chunker;\n\nvar Dechunker =\n/*#__PURE__*/\nfunction () {\n  function Dechunker() {\n    (0, _classCallCheck2[\"default\"])(this, Dechunker);\n    this._currentMessage = [];\n    this._partialChunkHeader = 0;\n    this._state = this.AWAITING_CHUNK;\n  }\n\n  (0, _createClass2[\"default\"])(Dechunker, [{\n    key: \"AWAITING_CHUNK\",\n    value: function AWAITING_CHUNK(buf) {\n      if (buf.remaining() >= 2) {\n        // Whole header available, read that\n        return this._onHeader(buf.readUInt16());\n      } else {\n        // Only one byte available, read that and wait for the second byte\n        this._partialChunkHeader = buf.readUInt8() << 8;\n        return this.IN_HEADER;\n      }\n    }\n  }, {\n    key: \"IN_HEADER\",\n    value: function IN_HEADER(buf) {\n      // First header byte read, now we read the next one\n      return this._onHeader((this._partialChunkHeader | buf.readUInt8()) & 0xffff);\n    }\n  }, {\n    key: \"IN_CHUNK\",\n    value: function IN_CHUNK(buf) {\n      if (this._chunkSize <= buf.remaining()) {\n        // Current packet is larger than current chunk, or same size:\n        this._currentMessage.push(buf.readSlice(this._chunkSize));\n\n        return this.AWAITING_CHUNK;\n      } else {\n        // Current packet is smaller than the chunk we're reading, split the current chunk itself up\n        this._chunkSize -= buf.remaining();\n\n        this._currentMessage.push(buf.readSlice(buf.remaining()));\n\n        return this.IN_CHUNK;\n      }\n    }\n  }, {\n    key: \"CLOSED\",\n    value: function CLOSED(buf) {} // no-op\n\n    /** Called when a complete chunk header has been received */\n\n  }, {\n    key: \"_onHeader\",\n    value: function _onHeader(header) {\n      if (header === 0) {\n        // Message boundary\n        var message;\n\n        if (this._currentMessage.length === 1) {\n          message = this._currentMessage[0];\n        } else {\n          message = new _combinedBuf[\"default\"](this._currentMessage);\n        }\n\n        this._currentMessage = [];\n        this.onmessage(message);\n        return this.AWAITING_CHUNK;\n      } else {\n        this._chunkSize = header;\n        return this.IN_CHUNK;\n      }\n    }\n  }, {\n    key: \"write\",\n    value: function write(buf) {\n      while (buf.hasRemaining()) {\n        this._state = this._state(buf);\n      }\n    }\n  }]);\n  return Dechunker;\n}();\n\nexports.Dechunker = Dechunker;","map":null,"metadata":{},"sourceType":"script"}