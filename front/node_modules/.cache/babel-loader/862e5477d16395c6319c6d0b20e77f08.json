{"ast":null,"code":"var _jsxFileName = \"/Users/garanya/Desktop/course/front/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchThis = async () => {\n      const response = await fetch('/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cities: {\n            firstCity: this.state.firstCity,\n            secondCity: this.state.secondCity\n          }\n        })\n      });\n      const body = await response.json();\n      this.state.resultDist = \"Result distance = \" + body + \" km\";\n      this.forceUpdate();\n    };\n\n    this.exist = async () => {\n      const response = await fetch('/backend');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      this.state.data = body; //console.log(this.data);\n\n      return body;\n    };\n\n    this.state = {\n      showComponent: false,\n      data: null,\n      firstCity: \"\",\n      secondCity: \"\",\n      resultWay: \"\",\n      resultDist: \"\"\n    };\n  } // componentDidMount() {\n  //   this.callBackendAPI()\n  //     .then(res => this.setState({ data: res.express }))\n  //     .catch(err => console.log(err));\n  // }\n  // callBackendAPI = async () => {\n  //   const response = await fetch('/backend');\n  //   const body = await response.json();\n  //   if (response.status !== 200) {\n  //     throw Error(body.message) \n  //   }\n  //   this.state.data = body;\n  //   //console.log(this.data);\n  //   return body;\n  // };\n\n\n  firstTextField(event) {\n    this.state.firstCity = event.target.value;\n    this.forceUpdate(); //this.searchThis();\n  }\n\n  secondTextField(event) {\n    this.state.secondCity = event.target.value;\n    this.forceUpdate(); //this.searchThis();\n  }\n\n  search(event) {\n    // const response = await fetch('/backend'); {/* тут надо передать параметры (2 города) */}\n    // const body = await response.json();\n    // if (response.status !== 200) {\n    //   throw Error(body.message) \n    // }\n    // Тут мне нужно вернуть json с путем, и сконвертировать его в строку формата (город -(расстояние)-> город -...)\n    // Возможно добавление кнопки \"альтернативные варианты\"\n    // Если быстро сделаю, можно добавить поездом/самолетом, или типа того\n    // Прежде всего необходимо реализовать алгоритм дейкстры, отправлять и парсить запрос + , получать и парсить ответ + ,\n    // потом заполнить базу (разобраться с csv???). Сделать дизайн, возможно разобрарться с bootstrap?\n    // Уже после этого можно попытаться добавить разделение на транспортные затраты или предпочтительный вид передвижения\n    this.searchThis();\n    this.forceUpdate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name1\",\n      onChange: this.firstTextField.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name2\",\n      onChange: this.secondTextField.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.search.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"search\"), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.state.firstCity, \" -> \", this.state.secondCity), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.resultWay), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.resultDist));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/garanya/Desktop/course/front/src/App.js"],"names":["React","Component","ReactDOM","App","constructor","props","searchThis","response","fetch","method","headers","body","JSON","stringify","cities","firstCity","state","secondCity","json","resultDist","forceUpdate","exist","status","Error","message","data","showComponent","resultWay","firstTextField","event","target","value","secondTextField","search","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showComponent: false,\n      data: null,\n      firstCity: \"\",\n      secondCity: \"\",\n      resultWay: \"\",\n      resultDist: \"\",\n    };\n    \n  }\n  // componentDidMount() {\n  //   this.callBackendAPI()\n  //     .then(res => this.setState({ data: res.express }))\n  //     .catch(err => console.log(err));\n  // }\n  // callBackendAPI = async () => {\n  //   const response = await fetch('/backend');\n  //   const body = await response.json();\n\n  //   if (response.status !== 200) {\n  //     throw Error(body.message) \n  //   }\n  //   this.state.data = body;\n  //   //console.log(this.data);\n  //   return body;\n  // };\n\n  firstTextField(event) {\n    this.state.firstCity = event.target.value;\n    this.forceUpdate();\n    //this.searchThis();\n  }\n  secondTextField(event) {\n    this.state.secondCity = event.target.value;\n    this.forceUpdate();\n    //this.searchThis();\n  }\n\n  searchThis = async () => {\n    const response = await fetch('/', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        cities: {\n            firstCity: this.state.firstCity,\n            secondCity: this.state.secondCity\n        }\n      })\n    });\n    const body = await response.json();\n    this.state.resultDist = \"Result distance = \" + body + \" km\";\n    this.forceUpdate();\n  };\n\n  exist = async () => {\n    const response = await fetch('/backend');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    this.state.data = body;\n    //console.log(this.data);\n    return body;\n  };\n\n  search(event) {\n    // const response = await fetch('/backend'); {/* тут надо передать параметры (2 города) */}\n    // const body = await response.json();\n\n    // if (response.status !== 200) {\n    //   throw Error(body.message) \n    // }\n\n    // Тут мне нужно вернуть json с путем, и сконвертировать его в строку формата (город -(расстояние)-> город -...)\n\n    // Возможно добавление кнопки \"альтернативные варианты\"\n    // Если быстро сделаю, можно добавить поездом/самолетом, или типа того\n\n    // Прежде всего необходимо реализовать алгоритм дейкстры, отправлять и парсить запрос + , получать и парсить ответ + ,\n    // потом заполнить базу (разобраться с csv???). Сделать дизайн, возможно разобрарться с bootstrap?\n    // Уже после этого можно попытаться добавить разделение на транспортные затраты или предпочтительный вид передвижения\n\n    this.searchThis();    \n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"text\" id=\"name1\" onChange={this.firstTextField.bind(this)} />\n        <input type=\"text\" id=\"name2\" onChange={this.secondTextField.bind(this)} />\n        <button onClick={this.search.bind(this)}>search</button>\n        <p className=\"App-intro\">{this.state.firstCity} -> {this.state.secondCity}</p>\n        <p className=\"App-intro\">{this.state.resultWay}</p>\n        <p className=\"App-intro\">{this.state.resultDist}</p>\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header> */}\n      </div>\n\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}