{"ast":null,"code":"var _jsxFileName = \"/Users/garanya/Desktop/dbcourse/courseProjectDB/front/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.callInit = async () => {\n      fetch('/init').then(data => {\n        data.json();\n        this.state.cities = data;\n        console.log(data.body);\n      });\n      console.log(this.state.cities);\n    };\n\n    this.searchThis = async () => {\n      const response = await fetch('/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cities: {\n            firstCity: this.state.firstCity,\n            secondCity: this.state.secondCity\n          }\n        })\n      });\n      const body = await response.json();\n      this.state.resultDist = \"Result distance = \" + body + \" km\";\n      this.forceUpdate();\n    };\n\n    this.state = {\n      showComponent: false,\n      data: null,\n      firstCity: \"\",\n      secondCity: \"\",\n      resultWay: \"\",\n      resultDist: \"\",\n      cities: []\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', this.callInit);\n  }\n\n  firstTextField(event) {\n    this.state.firstCity = event.target.value;\n    this.forceUpdate(); //this.search(this);\n  }\n\n  secondTextField(event) {\n    this.state.secondCity = event.target.value;\n    this.forceUpdate(); //this.search(this);\n  }\n\n  search(event) {\n    // const response = await fetch('/backend'); {/* тут надо передать параметры (2 города) */}\n    // const body = await response.json();\n    // if (response.status !== 200) {\n    //   throw Error(body.message) \n    // }\n    // Тут мне нужно вернуть json с путем, и сконвертировать его в строку формата (город -(расстояние)-> город -...) +\n    // Возможно добавление кнопки \"альтернативные варианты\"\n    // Если быстро сделаю, можно добавить поездом/самолетом, или типа того\n    // Прежде всего необходимо реализовать алгоритм дейкстры, отправлять и парсить запрос + , получать и парсить ответ + , +\n    // потом заполнить базу (разобраться с csv???). Сделать дизайн, возможно разобрарться с bootstrap?\n    // Уже после этого можно попытаться добавить разделение на транспортные затраты или предпочтительный вид передвижения\n    this.searchThis();\n    this.forceUpdate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name1\",\n      onChange: this.firstTextField.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name2\",\n      onChange: this.secondTextField.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.search.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"search\"), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.firstCity, \" -> \", this.state.secondCity), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.state.resultWay), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.resultDist));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/garanya/Desktop/dbcourse/courseProjectDB/front/src/App.js"],"names":["React","Component","ReactDOM","App","constructor","props","callInit","fetch","then","data","json","state","cities","console","log","body","searchThis","response","method","headers","JSON","stringify","firstCity","secondCity","resultDist","forceUpdate","showComponent","resultWay","componentDidMount","window","addEventListener","firstTextField","event","target","value","secondTextField","search","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showComponent: false,\n      data: null,\n      firstCity: \"\",\n      secondCity: \"\",\n      resultWay: \"\",\n      resultDist: \"\",\n      cities: [],\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', this.callInit);\n  }\n\n  callInit = async () => {\n    fetch('/init')\n      .then(data => {\n        data.json();\n        this.state.cities= data;\n        console.log(data.body);\n      });\n    console.log(this.state.cities);\n  };\n\n  firstTextField(event) {\n    this.state.firstCity = event.target.value;\n    this.forceUpdate();\n    //this.search(this);\n  }\n  secondTextField(event) {\n    this.state.secondCity = event.target.value;\n    this.forceUpdate();\n    //this.search(this);\n  }\n\n  searchThis = async () => {\n    const response = await fetch('/', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        cities: {\n            firstCity: this.state.firstCity,\n            secondCity: this.state.secondCity\n        }\n      })\n    });\n    const body = await response.json();\n    this.state.resultDist = \"Result distance = \" + body + \" km\";\n    this.forceUpdate();\n  };\n\n  search(event) {\n    // const response = await fetch('/backend'); {/* тут надо передать параметры (2 города) */}\n    // const body = await response.json();\n\n    // if (response.status !== 200) {\n    //   throw Error(body.message) \n    // }\n\n    // Тут мне нужно вернуть json с путем, и сконвертировать его в строку формата (город -(расстояние)-> город -...) +\n\n    // Возможно добавление кнопки \"альтернативные варианты\"\n    // Если быстро сделаю, можно добавить поездом/самолетом, или типа того\n\n    // Прежде всего необходимо реализовать алгоритм дейкстры, отправлять и парсить запрос + , получать и парсить ответ + , +\n    // потом заполнить базу (разобраться с csv???). Сделать дизайн, возможно разобрарться с bootstrap?\n    // Уже после этого можно попытаться добавить разделение на транспортные затраты или предпочтительный вид передвижения\n\n    this.searchThis();    \n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"text\" id=\"name1\" onChange={this.firstTextField.bind(this)} />\n        <input type=\"text\" id=\"name2\" onChange={this.secondTextField.bind(this)} />\n        <button onClick={this.search.bind(this)}>search</button>\n        <p className=\"App-intro\">{this.state.firstCity} -> {this.state.secondCity}</p>\n        <p className=\"App-intro\">{this.state.resultWay}</p>\n        <p className=\"App-intro\">{this.state.resultDist}</p>\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header> */}\n      </div>\n\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}