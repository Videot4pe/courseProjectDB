{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.newError = newError;\nexports.PROTOCOL_ERROR = exports.SESSION_EXPIRED = exports.SERVICE_UNAVAILABLE = exports.Neo4jError = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// A common place for constructing error objects, to keep them\n// uniform across the driver surface.\n\n/**\n * Error code representing complete loss of service. Used by {@link Neo4jError#code}.\n * @type {string}\n */\n\n\nvar SERVICE_UNAVAILABLE = 'ServiceUnavailable';\n/**\n * Error code representing transient loss of service. Used by {@link Neo4jError#code}.\n * @type {string}\n */\n\nexports.SERVICE_UNAVAILABLE = SERVICE_UNAVAILABLE;\nvar SESSION_EXPIRED = 'SessionExpired';\n/**\n * Error code representing serialization/deserialization issue in the Bolt protocol. Used by {@link Neo4jError#code}.\n * @type {string}\n */\n\nexports.SESSION_EXPIRED = SESSION_EXPIRED;\nvar PROTOCOL_ERROR = 'ProtocolError';\nexports.PROTOCOL_ERROR = PROTOCOL_ERROR;\n\nfunction newError(message) {\n  var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'N/A'; // TODO: Idea is that we can check the code here and throw sub-classes\n  // of Neo4jError as appropriate\n\n  return new Neo4jError(message, code);\n}\n/**\n * Class for all errors thrown/returned by the driver.\n */\n\n\nvar Neo4jError =\n/*#__PURE__*/\nfunction (_Error) {\n  (0, _inherits2[\"default\"])(Neo4jError, _Error);\n  /**\n   * @constructor\n   * @param {string} message - The error message.\n   * @param {string} code - Optional error code. Will be populated when error originates in the database.\n   */\n\n  function Neo4jError(message) {\n    var _this;\n\n    var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'N/A';\n    (0, _classCallCheck2[\"default\"])(this, Neo4jError);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Neo4jError).call(this, message));\n    _this.message = message;\n    _this.code = code;\n    _this.name = 'Neo4jError';\n    return _this;\n  }\n\n  return Neo4jError;\n}((0, _wrapNativeSuper2[\"default\"])(Error));\n\nexports.Neo4jError = Neo4jError;","map":null,"metadata":{},"sourceType":"script"}