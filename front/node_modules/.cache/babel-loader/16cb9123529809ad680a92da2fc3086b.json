{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _error = require(\"../error\");\n\nvar _util = require(\"./util\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar DEFAULT_CONNECTION_TIMEOUT_MILLIS = 30000; // 30 seconds by default\n\nvar ALLOWED_VALUES_ENCRYPTED = [null, undefined, true, false, _util.ENCRYPTION_ON, _util.ENCRYPTION_OFF];\nvar ALLOWED_VALUES_TRUST = [null, undefined, 'TRUST_ALL_CERTIFICATES', 'TRUST_ON_FIRST_USE', 'TRUST_SIGNED_CERTIFICATES', 'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES', 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'];\n\nvar ChannelConfig =\n/**\n * @constructor\n * @param {ServerAddress} address the address for the channel to connect to.\n * @param {object} driverConfig the driver config provided by the user when driver is created.\n * @param {string} connectionErrorCode the default error code to use on connection errors.\n */\nfunction ChannelConfig(address, driverConfig, connectionErrorCode) {\n  (0, _classCallCheck2[\"default\"])(this, ChannelConfig);\n  this.address = address;\n  this.encrypted = extractEncrypted(driverConfig);\n  this.trust = extractTrust(driverConfig);\n  this.trustedCertificates = extractTrustedCertificates(driverConfig);\n  this.knownHostsPath = extractKnownHostsPath(driverConfig);\n  this.connectionErrorCode = connectionErrorCode || _error.SERVICE_UNAVAILABLE;\n  this.connectionTimeout = extractConnectionTimeout(driverConfig);\n};\n\nexports[\"default\"] = ChannelConfig;\n\nfunction extractEncrypted(driverConfig) {\n  var value = driverConfig.encrypted;\n\n  if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {\n    throw (0, _error.newError)(\"Illegal value of the encrypted setting \".concat(value, \". Expected one of \").concat(ALLOWED_VALUES_ENCRYPTED));\n  }\n\n  return value;\n}\n\nfunction extractTrust(driverConfig) {\n  var value = driverConfig.trust;\n\n  if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {\n    throw (0, _error.newError)(\"Illegal value of the trust setting \".concat(value, \". Expected one of \").concat(ALLOWED_VALUES_TRUST));\n  }\n\n  return value;\n}\n\nfunction extractTrustedCertificates(driverConfig) {\n  return driverConfig.trustedCertificates || [];\n}\n\nfunction extractKnownHostsPath(driverConfig) {\n  return driverConfig.knownHosts || null;\n}\n\nfunction extractConnectionTimeout(driverConfig) {\n  var configuredTimeout = parseInt(driverConfig.connectionTimeout, 10);\n\n  if (configuredTimeout === 0) {\n    // timeout explicitly configured to 0\n    return null;\n  } else if (configuredTimeout && configuredTimeout < 0) {\n    // timeout explicitly configured to a negative value\n    return null;\n  } else if (!configuredTimeout) {\n    // timeout not configured, use default value\n    return DEFAULT_CONNECTION_TIMEOUT_MILLIS;\n  } else {\n    // timeout configured, use the provided value\n    return configuredTimeout;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}