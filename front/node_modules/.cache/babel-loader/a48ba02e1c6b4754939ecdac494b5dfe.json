{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VERSION_IN_DEV = exports.VERSION_4_0_0 = exports.VERSION_3_5_0 = exports.VERSION_3_4_0 = exports.VERSION_3_2_0 = exports.VERSION_3_1_0 = exports.ServerVersion = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _util = require(\"./util\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar SERVER_VERSION_REGEX = new RegExp('^(Neo4j/)?(\\\\d+)\\\\.(\\\\d+)(?:\\\\.)?(\\\\d*)(\\\\.|-|\\\\+)?([0-9A-Za-z-.]*)?$');\nvar NEO4J_IN_DEV_VERSION_STRING = 'Neo4j/dev';\n\nvar ServerVersion =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {number} major the major version number.\n   * @param {number} minor the minor version number.\n   * @param {number} patch the patch version number.\n   */\n  function ServerVersion(major, minor, patch) {\n    (0, _classCallCheck2[\"default\"])(this, ServerVersion);\n    this.major = major;\n    this.minor = minor;\n    this.patch = patch;\n  }\n  /**\n   * Fetch server version using the given driver.\n   * @param {Driver} driver the driver to use.\n   * @return {Promise<ServerVersion>} promise resolved with a {@link ServerVersion} object or rejected with error.\n   */\n\n\n  (0, _createClass2[\"default\"])(ServerVersion, [{\n    key: \"compareTo\",\n\n    /**\n     * Compare this version to the given one.\n     * @param {ServerVersion} other the version to compare with.\n     * @return {number} value 0 if this version is the same as the given one, value less then 0 when this version\n     * was released earlier than the given one and value greater then 0 when this version was released after\n     * than the given one.\n     */\n    value: function compareTo(other) {\n      var result = compareInts(this.major, other.major);\n\n      if (result === 0) {\n        result = compareInts(this.minor, other.minor);\n\n        if (result === 0) {\n          result = compareInts(this.patch, other.patch);\n        }\n      }\n\n      return result;\n    }\n  }], [{\n    key: \"fromDriver\",\n    value: function fromDriver(driver) {\n      var session = driver.session();\n      return session.run('RETURN 1').then(function (result) {\n        session.close();\n        return ServerVersion.fromString(result.summary.server.version);\n      });\n    }\n    /**\n     * Parse given string to a {@link ServerVersion} object.\n     * @param {string} versionStr the string to parse.\n     * @return {ServerVersion} version for the given string.\n     * @throws Error if given string can't be parsed.\n     */\n\n  }, {\n    key: \"fromString\",\n    value: function fromString(versionStr) {\n      if (!versionStr) {\n        return new ServerVersion(3, 0, 0);\n      }\n\n      (0, _util.assertString)(versionStr, 'Neo4j version string');\n\n      if (versionStr.toLowerCase() === NEO4J_IN_DEV_VERSION_STRING.toLowerCase()) {\n        return VERSION_IN_DEV;\n      }\n\n      var version = versionStr.match(SERVER_VERSION_REGEX);\n\n      if (!version) {\n        throw new Error(\"Unparsable Neo4j version: \".concat(versionStr));\n      }\n\n      var major = parseIntStrict(version[2]);\n      var minor = parseIntStrict(version[3]);\n      var patch = parseIntStrict(version[4] || 0);\n      return new ServerVersion(major, minor, patch);\n    }\n  }]);\n  return ServerVersion;\n}();\n\nexports.ServerVersion = ServerVersion;\n\nfunction parseIntStrict(str, name) {\n  var value = parseInt(str, 10);\n\n  if (!value && value !== 0) {\n    throw new Error(\"Unparsable number \".concat(name, \": '\").concat(str, \"'\"));\n  }\n\n  return value;\n}\n\nfunction compareInts(x, y) {\n  return x < y ? -1 : x === y ? 0 : 1;\n}\n\nvar VERSION_3_1_0 = new ServerVersion(3, 1, 0);\nexports.VERSION_3_1_0 = VERSION_3_1_0;\nvar VERSION_3_2_0 = new ServerVersion(3, 2, 0);\nexports.VERSION_3_2_0 = VERSION_3_2_0;\nvar VERSION_3_4_0 = new ServerVersion(3, 4, 0);\nexports.VERSION_3_4_0 = VERSION_3_4_0;\nvar VERSION_3_5_0 = new ServerVersion(3, 5, 0);\nexports.VERSION_3_5_0 = VERSION_3_5_0;\nvar VERSION_4_0_0 = new ServerVersion(4, 0, 0);\nexports.VERSION_4_0_0 = VERSION_4_0_0;\nvar maxVer = Number.MAX_SAFE_INTEGER;\nvar VERSION_IN_DEV = new ServerVersion(maxVer, maxVer, maxVer);\nexports.VERSION_IN_DEV = VERSION_IN_DEV;","map":null,"metadata":{},"sourceType":"script"}