{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _uriJs = require(\"uri-js\");\n\nvar _util = require(\"./util\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar DEFAULT_BOLT_PORT = 7687;\nvar DEFAULT_HTTP_PORT = 7474;\nvar DEFAULT_HTTPS_PORT = 7473;\n\nvar Url = function Url(scheme, host, port, hostAndPort, query) {\n  (0, _classCallCheck2[\"default\"])(this, Url);\n  /**\n   * Nullable scheme (protocol) of the URL.\n   * Example: 'bolt', 'bolt+routing', 'http', 'https', etc.\n   * @type {string}\n   */\n\n  this.scheme = scheme;\n  /**\n   * Nonnull host name or IP address. IPv6 not wrapped in square brackets.\n   * Example: 'neo4j.com', 'localhost', '127.0.0.1', '192.168.10.15', '::1', '2001:4860:4860::8844', etc.\n   * @type {string}\n   */\n\n  this.host = host;\n  /**\n   * Nonnull number representing port. Default port for the given scheme is used if given URL string\n   * does not contain port. Example: 7687 for bolt, 7474 for HTTP and 7473 for HTTPS.\n   * @type {number}\n   */\n\n  this.port = port;\n  /**\n   * Nonnull host name or IP address plus port, separated by ':'. IPv6 wrapped in square brackets.\n   * Example: 'neo4j.com', 'neo4j.com:7687', '127.0.0.1', '127.0.0.1:8080', '[2001:4860:4860::8844]',\n   * '[2001:4860:4860::8844]:9090', etc.\n   * @type {string}\n   */\n\n  this.hostAndPort = hostAndPort;\n  /**\n   * Nonnull object representing parsed query string key-value pairs. Duplicated keys not supported.\n   * Example: '{}', '{'key1': 'value1', 'key2': 'value2'}', etc.\n   * @type {object}\n   */\n\n  this.query = query;\n};\n\nfunction parseDatabaseUrl(url) {\n  (0, _util.assertString)(url, 'URL');\n  var sanitized = sanitizeUrl(url);\n  var parsedUrl = (0, _uriJs.parse)(sanitized.url);\n  var scheme = sanitized.schemeMissing ? null : extractScheme(parsedUrl.scheme);\n  var host = extractHost(parsedUrl.host); // no square brackets for IPv6\n\n  var formattedHost = formatHost(host); // has square brackets for IPv6\n\n  var port = extractPort(parsedUrl.port, scheme);\n  var hostAndPort = \"\".concat(formattedHost, \":\").concat(port);\n  var query = extractQuery(parsedUrl.query, url);\n  return new Url(scheme, host, port, hostAndPort, query);\n}\n\nfunction sanitizeUrl(url) {\n  url = url.trim();\n\n  if (url.indexOf('://') === -1) {\n    // url does not contain scheme, add dummy 'none://' to make parser work correctly\n    return {\n      schemeMissing: true,\n      url: \"none://\".concat(url)\n    };\n  }\n\n  return {\n    schemeMissing: false,\n    url: url\n  };\n}\n\nfunction extractScheme(scheme) {\n  if (scheme) {\n    scheme = scheme.trim();\n\n    if (scheme.charAt(scheme.length - 1) === ':') {\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n\n    return scheme;\n  }\n\n  return null;\n}\n\nfunction extractHost(host, url) {\n  if (!host) {\n    throw new Error(\"Unable to extract host from \".concat(url));\n  }\n\n  return host.trim();\n}\n\nfunction extractPort(portString, scheme) {\n  var port = parseInt(portString, 10);\n  return port === 0 || port ? port : defaultPortForScheme(scheme);\n}\n\nfunction extractQuery(queryString, url) {\n  var query = trimAndSanitizeQuery(queryString);\n  var context = {};\n\n  if (query) {\n    query.split('&').forEach(function (pair) {\n      var keyValue = pair.split('=');\n\n      if (keyValue.length !== 2) {\n        throw new Error(\"Invalid parameters: '\".concat(keyValue, \"' in URL '\").concat(url, \"'.\"));\n      }\n\n      var key = trimAndVerifyQueryElement(keyValue[0], 'key', url);\n      var value = trimAndVerifyQueryElement(keyValue[1], 'value', url);\n\n      if (context[key]) {\n        throw new Error(\"Duplicated query parameters with key '\".concat(key, \"' in URL '\").concat(url, \"'\"));\n      }\n\n      context[key] = value;\n    });\n  }\n\n  return context;\n}\n\nfunction trimAndSanitizeQuery(query) {\n  query = (query || '').trim();\n\n  if (query && query.charAt(0) === '?') {\n    query = query.substring(1, query.length);\n  }\n\n  return query;\n}\n\nfunction trimAndVerifyQueryElement(element, name, url) {\n  element = (element || '').trim();\n\n  if (!element) {\n    throw new Error(\"Illegal empty \".concat(name, \" in URL query '\").concat(url, \"'\"));\n  }\n\n  return element;\n}\n\nfunction escapeIPv6Address(address) {\n  var startsWithSquareBracket = address.charAt(0) === '[';\n  var endsWithSquareBracket = address.charAt(address.length - 1) === ']';\n\n  if (!startsWithSquareBracket && !endsWithSquareBracket) {\n    return \"[\".concat(address, \"]\");\n  } else if (startsWithSquareBracket && endsWithSquareBracket) {\n    return address;\n  } else {\n    throw new Error(\"Illegal IPv6 address \".concat(address));\n  }\n}\n\nfunction formatHost(host) {\n  if (!host) {\n    throw new Error(\"Illegal host \".concat(host));\n  }\n\n  var isIPv6Address = host.indexOf(':') >= 0;\n  return isIPv6Address ? escapeIPv6Address(host) : host;\n}\n\nfunction formatIPv4Address(address, port) {\n  return \"\".concat(address, \":\").concat(port);\n}\n\nfunction formatIPv6Address(address, port) {\n  var escapedAddress = escapeIPv6Address(address);\n  return \"\".concat(escapedAddress, \":\").concat(port);\n}\n\nfunction defaultPortForScheme(scheme) {\n  if (scheme === 'http') {\n    return DEFAULT_HTTP_PORT;\n  } else if (scheme === 'https') {\n    return DEFAULT_HTTPS_PORT;\n  } else {\n    return DEFAULT_BOLT_PORT;\n  }\n}\n\nvar _default = {\n  parseDatabaseUrl: parseDatabaseUrl,\n  defaultPortForScheme: defaultPortForScheme,\n  formatIPv4Address: formatIPv4Address,\n  formatIPv6Address: formatIPv6Address\n};\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}