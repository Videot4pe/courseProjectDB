{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common base with default implementation for most buffer methods.\n * Buffers are stateful - they track a current \"position\", this helps greatly\n * when reading and writing from them incrementally. You can also ignore the\n * stateful read/write methods.\n * readXXX and writeXXX-methods move the inner position of the buffer.\n * putXXX and getXXX-methods do not.\n * @access private\n */\n\n\nvar BaseBuffer =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a instance with the injected size.\n   * @constructor\n   * @param {Integer} size\n   */\n  function BaseBuffer(size) {\n    (0, _classCallCheck2[\"default\"])(this, BaseBuffer);\n    this.position = 0;\n    this.length = size;\n  }\n\n  (0, _createClass2[\"default\"])(BaseBuffer, [{\n    key: \"getUInt8\",\n    value: function getUInt8(position) {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"getInt8\",\n    value: function getInt8(position) {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"getFloat64\",\n    value: function getFloat64(position) {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"putUInt8\",\n    value: function putUInt8(position, val) {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"putInt8\",\n    value: function putInt8(position, val) {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"putFloat64\",\n    value: function putFloat64(position, val) {\n      throw new Error('Not implemented');\n    }\n    /**\n     * @param p\n     */\n\n  }, {\n    key: \"getInt16\",\n    value: function getInt16(p) {\n      return this.getInt8(p) << 8 | this.getUInt8(p + 1);\n    }\n    /**\n     * @param p\n     */\n\n  }, {\n    key: \"getUInt16\",\n    value: function getUInt16(p) {\n      return this.getUInt8(p) << 8 | this.getUInt8(p + 1);\n    }\n    /**\n     * @param p\n     */\n\n  }, {\n    key: \"getInt32\",\n    value: function getInt32(p) {\n      return this.getInt8(p) << 24 | this.getUInt8(p + 1) << 16 | this.getUInt8(p + 2) << 8 | this.getUInt8(p + 3);\n    }\n    /**\n     * @param p\n     */\n\n  }, {\n    key: \"getUInt32\",\n    value: function getUInt32(p) {\n      return this.getUInt8(p) << 24 | this.getUInt8(p + 1) << 16 | this.getUInt8(p + 2) << 8 | this.getUInt8(p + 3);\n    }\n    /**\n     * @param p\n     */\n\n  }, {\n    key: \"getInt64\",\n    value: function getInt64(p) {\n      return this.getInt8(p) << 56 | this.getUInt8(p + 1) << 48 | this.getUInt8(p + 2) << 40 | this.getUInt8(p + 3) << 32 | this.getUInt8(p + 4) << 24 | this.getUInt8(p + 5) << 16 | this.getUInt8(p + 6) << 8 | this.getUInt8(p + 7);\n    }\n    /**\n     * Get a slice of this buffer. This method does not copy any data,\n     * but simply provides a slice view of this buffer\n     * @param start\n     * @param length\n     */\n\n  }, {\n    key: \"getSlice\",\n    value: function getSlice(start, length) {\n      return new SliceBuffer(start, length, this);\n    }\n    /**\n     * @param p\n     * @param val\n     */\n\n  }, {\n    key: \"putInt16\",\n    value: function putInt16(p, val) {\n      this.putInt8(p, val >> 8);\n      this.putUInt8(p + 1, val & 0xff);\n    }\n    /**\n     * @param p\n     * @param val\n     */\n\n  }, {\n    key: \"putUInt16\",\n    value: function putUInt16(p, val) {\n      this.putUInt8(p, val >> 8 & 0xff);\n      this.putUInt8(p + 1, val & 0xff);\n    }\n    /**\n     * @param p\n     * @param val\n     */\n\n  }, {\n    key: \"putInt32\",\n    value: function putInt32(p, val) {\n      this.putInt8(p, val >> 24);\n      this.putUInt8(p + 1, val >> 16 & 0xff);\n      this.putUInt8(p + 2, val >> 8 & 0xff);\n      this.putUInt8(p + 3, val & 0xff);\n    }\n    /**\n     * @param p\n     * @param val\n     */\n\n  }, {\n    key: \"putUInt32\",\n    value: function putUInt32(p, val) {\n      this.putUInt8(p, val >> 24 & 0xff);\n      this.putUInt8(p + 1, val >> 16 & 0xff);\n      this.putUInt8(p + 2, val >> 8 & 0xff);\n      this.putUInt8(p + 3, val & 0xff);\n    }\n    /**\n     * @param p\n     * @param val\n     */\n\n  }, {\n    key: \"putInt64\",\n    value: function putInt64(p, val) {\n      this.putInt8(p, val >> 48);\n      this.putUInt8(p + 1, val >> 42 & 0xff);\n      this.putUInt8(p + 2, val >> 36 & 0xff);\n      this.putUInt8(p + 3, val >> 30 & 0xff);\n      this.putUInt8(p + 4, val >> 24 & 0xff);\n      this.putUInt8(p + 5, val >> 16 & 0xff);\n      this.putUInt8(p + 6, val >> 8 & 0xff);\n      this.putUInt8(p + 7, val & 0xff);\n    }\n    /**\n     * @param position\n     * @param other\n     */\n\n  }, {\n    key: \"putBytes\",\n    value: function putBytes(position, other) {\n      for (var i = 0, end = other.remaining(); i < end; i++) {\n        this.putUInt8(position + i, other.readUInt8());\n      }\n    }\n    /**\n     * Read from state position.\n     */\n\n  }, {\n    key: \"readUInt8\",\n    value: function readUInt8() {\n      return this.getUInt8(this._updatePos(1));\n    }\n    /**\n     * Read from state position.\n     */\n\n  }, {\n    key: \"readInt8\",\n    value: function readInt8() {\n      return this.getInt8(this._updatePos(1));\n    }\n    /**\n     * Read from state position.\n     */\n\n  }, {\n    key: \"readUInt16\",\n    value: function readUInt16() {\n      return this.getUInt16(this._updatePos(2));\n    }\n    /**\n     * Read from state position.\n     */\n\n  }, {\n    key: \"readUInt32\",\n    value: function readUInt32() {\n      return this.getUInt32(this._updatePos(4));\n    }\n    /**\n     * Read from state position.\n     */\n\n  }, {\n    key: \"readInt16\",\n    value: function readInt16() {\n      return this.getInt16(this._updatePos(2));\n    }\n    /**\n     * Read from state position.\n     */\n\n  }, {\n    key: \"readInt32\",\n    value: function readInt32() {\n      return this.getInt32(this._updatePos(4));\n    }\n    /**\n     * Read from state position.\n     */\n\n  }, {\n    key: \"readInt64\",\n    value: function readInt64() {\n      return this.getInt32(this._updatePos(8));\n    }\n    /**\n     * Read from state position.\n     */\n\n  }, {\n    key: \"readFloat64\",\n    value: function readFloat64() {\n      return this.getFloat64(this._updatePos(8));\n    }\n    /**\n     * Write to state position.\n     * @param val\n     */\n\n  }, {\n    key: \"writeUInt8\",\n    value: function writeUInt8(val) {\n      this.putUInt8(this._updatePos(1), val);\n    }\n    /**\n     * Write to state position.\n     * @param val\n     */\n\n  }, {\n    key: \"writeInt8\",\n    value: function writeInt8(val) {\n      this.putInt8(this._updatePos(1), val);\n    }\n    /**\n     * Write to state position.\n     * @param val\n     */\n\n  }, {\n    key: \"writeInt16\",\n    value: function writeInt16(val) {\n      this.putInt16(this._updatePos(2), val);\n    }\n    /**\n     * Write to state position.\n     * @param val\n     */\n\n  }, {\n    key: \"writeInt32\",\n    value: function writeInt32(val) {\n      this.putInt32(this._updatePos(4), val);\n    }\n    /**\n     * Write to state position.\n     * @param val\n     */\n\n  }, {\n    key: \"writeUInt32\",\n    value: function writeUInt32(val) {\n      this.putUInt32(this._updatePos(4), val);\n    }\n    /**\n     * Write to state position.\n     * @param val\n     */\n\n  }, {\n    key: \"writeInt64\",\n    value: function writeInt64(val) {\n      this.putInt64(this._updatePos(8), val);\n    }\n    /**\n     * Write to state position.\n     * @param val\n     */\n\n  }, {\n    key: \"writeFloat64\",\n    value: function writeFloat64(val) {\n      this.putFloat64(this._updatePos(8), val);\n    }\n    /**\n     * Write to state position.\n     * @param val\n     */\n\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(val) {\n      this.putBytes(this._updatePos(val.remaining()), val);\n    }\n    /**\n     * Get a slice of this buffer. This method does not copy any data,\n     * but simply provides a slice view of this buffer\n     * @param length\n     */\n\n  }, {\n    key: \"readSlice\",\n    value: function readSlice(length) {\n      return this.getSlice(this._updatePos(length), length);\n    }\n  }, {\n    key: \"_updatePos\",\n    value: function _updatePos(length) {\n      var p = this.position;\n      this.position += length;\n      return p;\n    }\n    /**\n     * Get remaining\n     */\n\n  }, {\n    key: \"remaining\",\n    value: function remaining() {\n      return this.length - this.position;\n    }\n    /**\n     * Has remaining\n     */\n\n  }, {\n    key: \"hasRemaining\",\n    value: function hasRemaining() {\n      return this.remaining() > 0;\n    }\n    /**\n     * Reset position state\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.position = 0;\n    }\n    /**\n     * Get string representation of buffer and it's state.\n     * @return {string} Buffer as a string\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.constructor.name + '( position=' + this.position + ' )\\n  ' + this.toHex();\n    }\n    /**\n     * Get string representation of buffer.\n     * @return {string} Buffer as a string\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      var out = '';\n\n      for (var i = 0; i < this.length; i++) {\n        var hexByte = this.getUInt8(i).toString(16);\n\n        if (hexByte.length === 1) {\n          hexByte = '0' + hexByte;\n        }\n\n        out += hexByte;\n\n        if (i !== this.length - 1) {\n          out += ' ';\n        }\n      }\n\n      return out;\n    }\n  }]);\n  return BaseBuffer;\n}();\n/**\n * Represents a view as slice of another buffer.\n * @access private\n */\n\n\nexports[\"default\"] = BaseBuffer;\n\nvar SliceBuffer =\n/*#__PURE__*/\nfunction (_BaseBuffer) {\n  (0, _inherits2[\"default\"])(SliceBuffer, _BaseBuffer);\n\n  function SliceBuffer(start, length, inner) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, SliceBuffer);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(SliceBuffer).call(this, length));\n    _this._start = start;\n    _this._inner = inner;\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(SliceBuffer, [{\n    key: \"putUInt8\",\n    value: function putUInt8(position, val) {\n      this._inner.putUInt8(this._start + position, val);\n    }\n  }, {\n    key: \"getUInt8\",\n    value: function getUInt8(position) {\n      return this._inner.getUInt8(this._start + position);\n    }\n  }, {\n    key: \"putInt8\",\n    value: function putInt8(position, val) {\n      this._inner.putInt8(this._start + position, val);\n    }\n  }, {\n    key: \"putFloat64\",\n    value: function putFloat64(position, val) {\n      this._inner.putFloat64(this._start + position, val);\n    }\n  }, {\n    key: \"getInt8\",\n    value: function getInt8(position) {\n      return this._inner.getInt8(this._start + position);\n    }\n  }, {\n    key: \"getFloat64\",\n    value: function getFloat64(position) {\n      return this._inner.getFloat64(this._start + position);\n    }\n  }]);\n  return SliceBuffer;\n}(BaseBuffer);","map":null,"metadata":{},"sourceType":"script"}