{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _error = require(\"../error\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar ConnectionErrorHandler =\n/*#__PURE__*/\nfunction () {\n  function ConnectionErrorHandler(errorCode, handleUnavailability, handleWriteFailure) {\n    (0, _classCallCheck2[\"default\"])(this, ConnectionErrorHandler);\n    this._errorCode = errorCode;\n    this._handleUnavailability = handleUnavailability || noOpHandler;\n    this._handleWriteFailure = handleWriteFailure || noOpHandler;\n  }\n  /**\n   * Error code to use for network errors.\n   * @return {string} the error code.\n   */\n\n\n  (0, _createClass2[\"default\"])(ConnectionErrorHandler, [{\n    key: \"errorCode\",\n    value: function errorCode() {\n      return this._errorCode;\n    }\n    /**\n     * Handle and transform the error.\n     * @param {Neo4jError} error the original error.\n     * @param {ServerAddress} address the address of the connection where the error happened.\n     * @return {Neo4jError} new error that should be propagated to the user.\n     */\n\n  }, {\n    key: \"handleAndTransformError\",\n    value: function handleAndTransformError(error, address) {\n      if (isAvailabilityError(error)) {\n        return this._handleUnavailability(error, address);\n      }\n\n      if (isFailureToWrite(error)) {\n        return this._handleWriteFailure(error, address);\n      }\n\n      return error;\n    }\n  }]);\n  return ConnectionErrorHandler;\n}();\n\nexports[\"default\"] = ConnectionErrorHandler;\n\nfunction isAvailabilityError(error) {\n  if (error) {\n    return error.code === _error.SESSION_EXPIRED || error.code === _error.SERVICE_UNAVAILABLE || error.code === 'Neo.TransientError.General.DatabaseUnavailable';\n  }\n\n  return false;\n}\n\nfunction isFailureToWrite(error) {\n  if (error) {\n    return error.code === 'Neo.ClientError.Cluster.NotALeader' || error.code === 'Neo.ClientError.General.ForbiddenOnReadOnlyDatabase';\n  }\n\n  return false;\n}\n\nfunction noOpHandler(error) {\n  return error;\n}","map":null,"metadata":{},"sourceType":"script"}