{"ast":null,"code":"var _jsxFileName = \"/Users/garanya/Desktop/course/front/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('/backend');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      this.state.data = body; //console.log(this.data);\n\n      return body;\n    };\n\n    this.state = {\n      showComponent: false,\n      data: null,\n      firstCity: \"\",\n      secondCity: \"\",\n      resultWay: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI().then(res => this.setState({\n      data: res.express\n    })).catch(err => console.log(err));\n  } // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n\n  firstTextField(event) {\n    this.state.firstCity = event.target.value;\n    this.forceUpdate();\n  }\n\n  secondTextField(event) {\n    this.state.secondCity = event.target.value;\n    this.forceUpdate();\n  }\n\n  search(event) {\n    // const response = await fetch('/backend'); {/* тут надо передать параметры (2 города) */}\n    // const body = await response.json();\n    // if (response.status !== 200) {\n    //   throw Error(body.message) \n    // }\n    // Тут мне нужно вернуть json с путем, и сконвертировать его в строку формата (город -(расстояние)-> город -...)\n    // Возможно добавление кнопки \"альтернативные варианты\"\n    // Если быстро сделаю, можно добавить поездом/самолетом, или типа того\n    // Прежде всего необходимо реализовать алгоритм дейкстры, отправлять и парсить запрос, получать и парсить ответ,\n    // потом заполнить базу (разобраться с csv???). Сделать дизайн, возможно разобрарться с bootstrap?\n    // Уже после этого можно попытаться добавить разделение на транспортные затраты или предпочтительный вид передвижения\n    const response = fetch('/backend', {\n      body: \"firstCity=Moscow&secondCity=London\"\n    });\n    const body = response.json();\n    this.state.resultWay = body;\n    console.log(this.state.firstCity, this.state.secondCity);\n    this.forceUpdate(); //return body;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name1\",\n      onChange: this.firstTextField.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name2\",\n      onChange: this.secondTextField.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.search.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"search\"), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.state.firstCity, \" -> \", this.state.secondCity), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.resultWay));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/garanya/Desktop/course/front/src/App.js"],"names":["React","Component","ReactDOM","App","constructor","props","callBackendAPI","response","fetch","body","json","status","Error","message","state","data","showComponent","firstCity","secondCity","resultWay","componentDidMount","then","res","setState","express","catch","err","console","log","firstTextField","event","target","value","forceUpdate","secondTextField","search","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showComponent: false,\n      data: null,\n      firstCity: \"\",\n      secondCity: \"\",\n      resultWay: \"\",\n    };\n    \n  }\n  componentDidMount() {\n      // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n  }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('/backend');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    this.state.data = body;\n    //console.log(this.data);\n    return body;\n  };\n\n  firstTextField(event) {\n    this.state.firstCity = event.target.value;\n    this.forceUpdate();\n  }\n  secondTextField(event) {\n    this.state.secondCity = event.target.value;\n    this.forceUpdate();\n  }\n\n  search(event) {\n    // const response = await fetch('/backend'); {/* тут надо передать параметры (2 города) */}\n    // const body = await response.json();\n\n    // if (response.status !== 200) {\n    //   throw Error(body.message) \n    // }\n\n    // Тут мне нужно вернуть json с путем, и сконвертировать его в строку формата (город -(расстояние)-> город -...)\n\n    // Возможно добавление кнопки \"альтернативные варианты\"\n    // Если быстро сделаю, можно добавить поездом/самолетом, или типа того\n\n    // Прежде всего необходимо реализовать алгоритм дейкстры, отправлять и парсить запрос, получать и парсить ответ,\n    // потом заполнить базу (разобраться с csv???). Сделать дизайн, возможно разобрарться с bootstrap?\n    // Уже после этого можно попытаться добавить разделение на транспортные затраты или предпочтительный вид передвижения\n\n    const response = fetch('/backend', {body:  \"firstCity=Moscow&secondCity=London\"});\n    const body = response.json();\n    this.state.resultWay = body;\n    console.log(this.state.firstCity, this.state.secondCity);\n    \n    this.forceUpdate();\n    //return body;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"text\" id=\"name1\" onChange={this.firstTextField.bind(this)} />\n        <input type=\"text\" id=\"name2\" onChange={this.secondTextField.bind(this)} />\n        <button onClick={this.search.bind(this)}>search</button>\n        <p className=\"App-intro\">{this.state.firstCity} -> {this.state.secondCity}</p>\n        <p className=\"App-intro\">{this.state.resultWay}</p>\n\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header> */}\n      </div>\n\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}