{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _connectionHolder = _interopRequireDefault(require(\"./connection-holder\"));\n\nvar _driver = require(\"../driver\");\n\nvar _streamObserver = _interopRequireDefault(require(\"./stream-observer\"));\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Verifies connectivity using the given connection provider.\n */\n\n\nvar ConnectivityVerifier =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\n   * @param {function} successCallback a callback to invoke when verification succeeds.\n   */\n  function ConnectivityVerifier(connectionProvider, successCallback) {\n    (0, _classCallCheck2[\"default\"])(this, ConnectivityVerifier);\n    this._connectionProvider = connectionProvider;\n    this._successCallback = successCallback;\n  }\n\n  (0, _createClass2[\"default\"])(ConnectivityVerifier, [{\n    key: \"verify\",\n    value: function verify() {\n      var _this = this;\n\n      acquireAndReleaseDummyConnection(this._connectionProvider).then(function (serverInfo) {\n        if (_this._successCallback) {\n          _this._successCallback(serverInfo);\n        }\n      })[\"catch\"](function (ignoredError) {});\n    }\n  }]);\n  return ConnectivityVerifier;\n}();\n/**\n * @private\n * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\n * @return {Promise<object>} promise resolved with server info or rejected with error.\n */\n\n\nexports[\"default\"] = ConnectivityVerifier;\n\nfunction acquireAndReleaseDummyConnection(connectionProvider) {\n  var connectionHolder = new _connectionHolder[\"default\"](_driver.READ, connectionProvider);\n  connectionHolder.initializeConnection();\n  var dummyObserver = new _streamObserver[\"default\"]();\n  var connectionPromise = connectionHolder.getConnection(dummyObserver);\n  return connectionPromise.then(function (connection) {\n    // able to establish a connection\n    return connectionHolder.close().then(function () {\n      return connection.server;\n    });\n  })[\"catch\"](function (error) {\n    // failed to establish a connection\n    return connectionHolder.close()[\"catch\"](function (ignoredError) {// ignore connection release error\n    }).then(function () {\n      return Promise.reject(error);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}