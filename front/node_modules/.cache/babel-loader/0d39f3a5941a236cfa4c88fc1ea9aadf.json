{"ast":null,"code":"var _jsxFileName = \"/Users/garanya/Desktop/dbcourse/courseProjectDB/front/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.callInit = async () => {\n      var response = await fetch('/init');\n      var body = await response.json();\n      this.state.cities = body;\n      var selectBox = document.getElementById('options');\n\n      for (var i = 0; i < this.state.cities.length; i++) {\n        var option = this.state.cities[i];\n        selectBox.options.add(new Option(option.text, i));\n      }\n    };\n\n    this.searchThis = async () => {\n      const response = await fetch('/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cities: {\n            firstCity: this.state.firstCity,\n            secondCity: this.state.secondCity\n          }\n        })\n      });\n      const body = await response.json();\n      this.state.resultDist = \"Result distance = \" + body + \" km\";\n      this.forceUpdate();\n    };\n\n    this.state = {\n      showComponent: false,\n      data: null,\n      firstCity: \"\",\n      secondCity: \"\",\n      resultWay: \"\",\n      resultDist: \"\",\n      cities: []\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', this.callInit);\n  }\n\n  firstTextField(event) {\n    this.state.firstCity = event.target.value;\n    this.forceUpdate(); //this.search(this);\n  }\n\n  secondTextField(event) {\n    this.state.secondCity = event.target.value;\n    this.forceUpdate(); //this.search(this);\n  }\n\n  search(event) {\n    // const response = await fetch('/backend'); {/* тут надо передать параметры (2 города) */}\n    // const body = await response.json();\n    // if (response.status !== 200) {\n    //   throw Error(body.message) \n    // }\n    // Тут мне нужно вернуть json с путем, и сконвертировать его в строку формата (город -(расстояние)-> город -...) +\n    // Возможно добавление кнопки \"альтернативные варианты\"\n    // Если быстро сделаю, можно добавить поездом/самолетом, или типа того\n    // Прежде всего необходимо реализовать алгоритм дейкстры, отправлять и парсить запрос + , получать и парсить ответ + , +\n    // потом заполнить базу (разобраться с csv???). Сделать дизайн, возможно разобрарться с bootstrap?\n    // Уже после этого можно попытаться добавить разделение на транспортные затраты или предпочтительный вид передвижения\n    this.searchThis();\n    this.forceUpdate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      id: \"options\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name1\",\n      onChange: this.firstTextField.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name2\",\n      onChange: this.secondTextField.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.search.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"search\"), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.state.firstCity, \" -> \", this.state.secondCity), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.state.resultWay), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.resultDist));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/garanya/Desktop/dbcourse/courseProjectDB/front/src/App.js"],"names":["React","Component","ReactDOM","App","constructor","props","callInit","response","fetch","body","json","state","cities","selectBox","document","getElementById","i","length","option","options","add","Option","text","searchThis","method","headers","JSON","stringify","firstCity","secondCity","resultDist","forceUpdate","showComponent","data","resultWay","componentDidMount","window","addEventListener","firstTextField","event","target","value","secondTextField","search","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showComponent: false,\n      data: null,\n      firstCity: \"\",\n      secondCity: \"\",\n      resultWay: \"\",\n      resultDist: \"\",\n      cities: [],\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', this.callInit);\n  }\n\n  callInit = async () => {\n    var response = await fetch('/init')\n    var body = await response.json();\n    this.state.cities = body;\n\n    var selectBox = document.getElementById('options');\n\n    for(var i = 0; i < this.state.cities.length; i++){\n      var option = this.state.cities[i];\n      selectBox.options.add(new Option(option.text, i) );\n    }\n  };\n\n  firstTextField(event) {\n    this.state.firstCity = event.target.value;\n    this.forceUpdate();\n    //this.search(this);\n  }\n  secondTextField(event) {\n    this.state.secondCity = event.target.value;\n    this.forceUpdate();\n    //this.search(this);\n  }\n\n  searchThis = async () => {\n    const response = await fetch('/', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        cities: {\n            firstCity: this.state.firstCity,\n            secondCity: this.state.secondCity\n        }\n      })\n    });\n    const body = await response.json();\n    this.state.resultDist = \"Result distance = \" + body + \" km\";\n    this.forceUpdate();\n  };\n\n  search(event) {\n    // const response = await fetch('/backend'); {/* тут надо передать параметры (2 города) */}\n    // const body = await response.json();\n\n    // if (response.status !== 200) {\n    //   throw Error(body.message) \n    // }\n\n    // Тут мне нужно вернуть json с путем, и сконвертировать его в строку формата (город -(расстояние)-> город -...) +\n\n    // Возможно добавление кнопки \"альтернативные варианты\"\n    // Если быстро сделаю, можно добавить поездом/самолетом, или типа того\n\n    // Прежде всего необходимо реализовать алгоритм дейкстры, отправлять и парсить запрос + , получать и парсить ответ + , +\n    // потом заполнить базу (разобраться с csv???). Сделать дизайн, возможно разобрарться с bootstrap?\n    // Уже после этого можно попытаться добавить разделение на транспортные затраты или предпочтительный вид передвижения\n\n    this.searchThis();    \n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <select id=\"options\"></select>\n\n\n        <input type=\"text\" id=\"name1\" onChange={this.firstTextField.bind(this)} />\n        <input type=\"text\" id=\"name2\" onChange={this.secondTextField.bind(this)} />\n        <button onClick={this.search.bind(this)}>search</button>\n        <p className=\"App-intro\">{this.state.firstCity} -> {this.state.secondCity}</p>\n        <p className=\"App-intro\">{this.state.resultWay}</p>\n        <p className=\"App-intro\">{this.state.resultDist}</p>\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header> */}\n      </div>\n\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}