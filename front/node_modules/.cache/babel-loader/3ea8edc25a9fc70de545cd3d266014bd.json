{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.toString = exports.toNumber = exports.inSafeRange = exports.isInt = exports[\"int\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _error = require(\"./error\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// 64-bit Integer library, originally from Long.js by dcodeIO\n// https://github.com/dcodeIO/Long.js\n// License Apache 2\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n * See exported functions for more convenient ways of operating integers.\n * Use `int()` function to create new integers, `isInt()` to check if given object is integer,\n * `inSafeRange()` to check if it is safe to convert given value to native number,\n * `toNumber()` and `toString()` to convert given integer to number or string respectively.\n * @access public\n * @exports Integer\n * @class A Integer class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @constructor\n */\n\n\nvar Integer =\n/*#__PURE__*/\nfunction () {\n  function Integer(low, high) {\n    (0, _classCallCheck2[\"default\"])(this, Integer);\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     * @expose\n     */\n\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     * @expose\n     */\n\n    this.high = high | 0;\n  } // The internal representation of an Integer is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // JavaScript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within JavaScript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n\n\n  (0, _createClass2[\"default\"])(Integer, [{\n    key: \"inSafeRange\",\n    value: function inSafeRange() {\n      return this.greaterThanOrEqual(Integer.MIN_SAFE_VALUE) && this.lessThanOrEqual(Integer.MAX_SAFE_VALUE);\n    }\n    /**\n     * Converts the Integer to an exact javascript Number, assuming it is a 32 bit integer.\n     * @returns {number}\n     * @expose\n     */\n\n  }, {\n    key: \"toInt\",\n    value: function toInt() {\n      return this.low;\n    }\n    /**\n     * Converts the Integer to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @returns {number}\n     * @expose\n     */\n\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    }\n    /**\n     * Converts the Integer to native number or -Infinity/+Infinity when it does not fit.\n     * @return {number}\n     * @package\n     */\n\n  }, {\n    key: \"toNumberOrInfinity\",\n    value: function toNumberOrInfinity() {\n      if (this.lessThan(Integer.MIN_SAFE_VALUE)) {\n        return Number.NEGATIVE_INFINITY;\n      } else if (this.greaterThan(Integer.MAX_SAFE_VALUE)) {\n        return Number.POSITIVE_INFINITY;\n      } else {\n        return this.toNumber();\n      }\n    }\n    /**\n     * Converts the Integer to a string written in the specified radix.\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     * @expose\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(radix) {\n      radix = radix || 10;\n\n      if (radix < 2 || radix > 36) {\n        throw RangeError('radix out of range: ' + radix);\n      }\n\n      if (this.isZero()) {\n        return '0';\n      }\n\n      var rem;\n\n      if (this.isNegative()) {\n        if (this.equals(Integer.MIN_VALUE)) {\n          // We need to change the Integer value before it can be negated, so we remove\n          // the bottom-most digit in this base and then recurse to do the rest.\n          var radixInteger = Integer.fromNumber(radix);\n          var div = this.div(radixInteger);\n          rem = div.multiply(radixInteger).subtract(this);\n          return div.toString(radix) + rem.toInt().toString(radix);\n        } else {\n          return '-' + this.negate().toString(radix);\n        }\n      } // Do several (6) digits each time through the loop, so as to\n      // minimize the calls to the very expensive emulated div.\n\n\n      var radixToPower = Integer.fromNumber(Math.pow(radix, 6));\n      rem = this;\n      var result = '';\n\n      while (true) {\n        var remDiv = rem.div(radixToPower);\n        var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n        var digits = intval.toString(radix);\n        rem = remDiv;\n\n        if (rem.isZero()) {\n          return digits + result;\n        } else {\n          while (digits.length < 6) {\n            digits = '0' + digits;\n          }\n\n          result = '' + digits + result;\n        }\n      }\n    }\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @returns {number} Signed high bits\n     * @expose\n     */\n\n  }, {\n    key: \"getHighBits\",\n    value: function getHighBits() {\n      return this.high;\n    }\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @returns {number} Signed low bits\n     * @expose\n     */\n\n  }, {\n    key: \"getLowBits\",\n    value: function getLowBits() {\n      return this.low;\n    }\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Integer.\n     * @returns {number}\n     * @expose\n     */\n\n  }, {\n    key: \"getNumBitsAbs\",\n    value: function getNumBitsAbs() {\n      if (this.isNegative()) {\n        return this.equals(Integer.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\n      }\n\n      var val = this.high !== 0 ? this.high : this.low;\n\n      for (var bit = 31; bit > 0; bit--) {\n        if ((val & 1 << bit) !== 0) {\n          break;\n        }\n      }\n\n      return this.high !== 0 ? bit + 33 : bit + 1;\n    }\n    /**\n     * Tests if this Integer's value equals zero.\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return this.high === 0 && this.low === 0;\n    }\n    /**\n     * Tests if this Integer's value is negative.\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"isNegative\",\n    value: function isNegative() {\n      return this.high < 0;\n    }\n    /**\n     * Tests if this Integer's value is positive.\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"isPositive\",\n    value: function isPositive() {\n      return this.high >= 0;\n    }\n    /**\n     * Tests if this Integer's value is odd.\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"isOdd\",\n    value: function isOdd() {\n      return (this.low & 1) === 1;\n    }\n    /**\n     * Tests if this Integer's value is even.\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"isEven\",\n    value: function isEven() {\n      return (this.low & 1) === 0;\n    }\n    /**\n     * Tests if this Integer's value equals the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!Integer.isInteger(other)) {\n        other = Integer.fromValue(other);\n      }\n\n      return this.high === other.high && this.low === other.low;\n    }\n    /**\n     * Tests if this Integer's value differs from the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"notEquals\",\n    value: function notEquals(other) {\n      return !this.equals(\n      /* validates */\n      other);\n    }\n    /**\n     * Tests if this Integer's value is less than the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(other) {\n      return this.compare(\n      /* validates */\n      other) < 0;\n    }\n    /**\n     * Tests if this Integer's value is less than or equal the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"lessThanOrEqual\",\n    value: function lessThanOrEqual(other) {\n      return this.compare(\n      /* validates */\n      other) <= 0;\n    }\n    /**\n     * Tests if this Integer's value is greater than the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"greaterThan\",\n    value: function greaterThan(other) {\n      return this.compare(\n      /* validates */\n      other) > 0;\n    }\n    /**\n     * Tests if this Integer's value is greater than or equal the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n\n  }, {\n    key: \"greaterThanOrEqual\",\n    value: function greaterThanOrEqual(other) {\n      return this.compare(\n      /* validates */\n      other) >= 0;\n    }\n    /**\n     * Compares this Integer's value with the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n\n  }, {\n    key: \"compare\",\n    value: function compare(other) {\n      if (!Integer.isInteger(other)) {\n        other = Integer.fromValue(other);\n      }\n\n      if (this.equals(other)) {\n        return 0;\n      }\n\n      var thisNeg = this.isNegative();\n      var otherNeg = other.isNegative();\n\n      if (thisNeg && !otherNeg) {\n        return -1;\n      }\n\n      if (!thisNeg && otherNeg) {\n        return 1;\n      } // At this point the sign bits are the same\n\n\n      return this.subtract(other).isNegative() ? -1 : 1;\n    }\n    /**\n     * Negates this Integer's value.\n     * @returns {!Integer} Negated Integer\n     * @expose\n     */\n\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      if (this.equals(Integer.MIN_VALUE)) {\n        return Integer.MIN_VALUE;\n      }\n\n      return this.not().add(Integer.ONE);\n    }\n    /**\n     * Returns the sum of this and the specified Integer.\n     * @param {!Integer|number|string} addend Addend\n     * @returns {!Integer} Sum\n     * @expose\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(addend) {\n      if (!Integer.isInteger(addend)) {\n        addend = Integer.fromValue(addend);\n      } // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n\n      var a48 = this.high >>> 16;\n      var a32 = this.high & 0xffff;\n      var a16 = this.low >>> 16;\n      var a00 = this.low & 0xffff;\n      var b48 = addend.high >>> 16;\n      var b32 = addend.high & 0xffff;\n      var b16 = addend.low >>> 16;\n      var b00 = addend.low & 0xffff;\n      var c48 = 0;\n      var c32 = 0;\n      var c16 = 0;\n      var c00 = 0;\n      c00 += a00 + b00;\n      c16 += c00 >>> 16;\n      c00 &= 0xffff;\n      c16 += a16 + b16;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c32 += a32 + b32;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c48 += a48 + b48;\n      c48 &= 0xffff;\n      return Integer.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n    }\n    /**\n     * Returns the difference of this and the specified Integer.\n     * @param {!Integer|number|string} subtrahend Subtrahend\n     * @returns {!Integer} Difference\n     * @expose\n     */\n\n  }, {\n    key: \"subtract\",\n    value: function subtract(subtrahend) {\n      if (!Integer.isInteger(subtrahend)) {\n        subtrahend = Integer.fromValue(subtrahend);\n      }\n\n      return this.add(subtrahend.negate());\n    }\n    /**\n     * Returns the product of this and the specified Integer.\n     * @param {!Integer|number|string} multiplier Multiplier\n     * @returns {!Integer} Product\n     * @expose\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(multiplier) {\n      if (this.isZero()) {\n        return Integer.ZERO;\n      }\n\n      if (!Integer.isInteger(multiplier)) {\n        multiplier = Integer.fromValue(multiplier);\n      }\n\n      if (multiplier.isZero()) {\n        return Integer.ZERO;\n      }\n\n      if (this.equals(Integer.MIN_VALUE)) {\n        return multiplier.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n      }\n\n      if (multiplier.equals(Integer.MIN_VALUE)) {\n        return this.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n      }\n\n      if (this.isNegative()) {\n        if (multiplier.isNegative()) {\n          return this.negate().multiply(multiplier.negate());\n        } else {\n          return this.negate().multiply(multiplier).negate();\n        }\n      } else if (multiplier.isNegative()) {\n        return this.multiply(multiplier.negate()).negate();\n      } // If both longs are small, use float multiplication\n\n\n      if (this.lessThan(TWO_PWR_24) && multiplier.lessThan(TWO_PWR_24)) {\n        return Integer.fromNumber(this.toNumber() * multiplier.toNumber());\n      } // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n      // We can skip products that would overflow.\n\n\n      var a48 = this.high >>> 16;\n      var a32 = this.high & 0xffff;\n      var a16 = this.low >>> 16;\n      var a00 = this.low & 0xffff;\n      var b48 = multiplier.high >>> 16;\n      var b32 = multiplier.high & 0xffff;\n      var b16 = multiplier.low >>> 16;\n      var b00 = multiplier.low & 0xffff;\n      var c48 = 0;\n      var c32 = 0;\n      var c16 = 0;\n      var c00 = 0;\n      c00 += a00 * b00;\n      c16 += c00 >>> 16;\n      c00 &= 0xffff;\n      c16 += a16 * b00;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c16 += a00 * b16;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c32 += a32 * b00;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c32 += a16 * b16;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c32 += a00 * b32;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n      c48 &= 0xffff;\n      return Integer.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n    }\n    /**\n     * Returns this Integer divided by the specified.\n     * @param {!Integer|number|string} divisor Divisor\n     * @returns {!Integer} Quotient\n     * @expose\n     */\n\n  }, {\n    key: \"div\",\n    value: function div(divisor) {\n      if (!Integer.isInteger(divisor)) {\n        divisor = Integer.fromValue(divisor);\n      }\n\n      if (divisor.isZero()) {\n        throw (0, _error.newError)('division by zero');\n      }\n\n      if (this.isZero()) {\n        return Integer.ZERO;\n      }\n\n      var approx, rem, res;\n\n      if (this.equals(Integer.MIN_VALUE)) {\n        if (divisor.equals(Integer.ONE) || divisor.equals(Integer.NEG_ONE)) {\n          return Integer.MIN_VALUE;\n        } else if (divisor.equals(Integer.MIN_VALUE)) {\n          return Integer.ONE;\n        } else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shiftRight(1);\n          approx = halfThis.div(divisor).shiftLeft(1);\n\n          if (approx.equals(Integer.ZERO)) {\n            return divisor.isNegative() ? Integer.ONE : Integer.NEG_ONE;\n          } else {\n            rem = this.subtract(divisor.multiply(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.equals(Integer.MIN_VALUE)) {\n        return Integer.ZERO;\n      }\n\n      if (this.isNegative()) {\n        if (divisor.isNegative()) {\n          return this.negate().div(divisor.negate());\n        }\n\n        return this.negate().div(divisor).negate();\n      } else if (divisor.isNegative()) {\n        return this.div(divisor.negate()).negate();\n      } // Repeat the following until the remainder is less than other:  find a\n      // floating-point that approximates remainder / other *from below*, add this\n      // into the result, and subtract it from the remainder.  It is critical that\n      // the approximate value is less than or equal to the real value so that the\n      // remainder never becomes negative.\n\n\n      res = Integer.ZERO;\n      rem = this;\n\n      while (rem.greaterThanOrEqual(divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n        var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48); // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n\n        var approxRes = Integer.fromNumber(approx);\n        var approxRem = approxRes.multiply(divisor);\n\n        while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n          approx -= delta;\n          approxRes = Integer.fromNumber(approx);\n          approxRem = approxRes.multiply(divisor);\n        } // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n\n\n        if (approxRes.isZero()) {\n          approxRes = Integer.ONE;\n        }\n\n        res = res.add(approxRes);\n        rem = rem.subtract(approxRem);\n      }\n\n      return res;\n    }\n    /**\n     * Returns this Integer modulo the specified.\n     * @param {!Integer|number|string} divisor Divisor\n     * @returns {!Integer} Remainder\n     * @expose\n     */\n\n  }, {\n    key: \"modulo\",\n    value: function modulo(divisor) {\n      if (!Integer.isInteger(divisor)) {\n        divisor = Integer.fromValue(divisor);\n      }\n\n      return this.subtract(this.div(divisor).multiply(divisor));\n    }\n    /**\n     * Returns the bitwise NOT of this Integer.\n     * @returns {!Integer}\n     * @expose\n     */\n\n  }, {\n    key: \"not\",\n    value: function not() {\n      return Integer.fromBits(~this.low, ~this.high);\n    }\n    /**\n     * Returns the bitwise AND of this Integer and the specified.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n\n  }, {\n    key: \"and\",\n    value: function and(other) {\n      if (!Integer.isInteger(other)) {\n        other = Integer.fromValue(other);\n      }\n\n      return Integer.fromBits(this.low & other.low, this.high & other.high);\n    }\n    /**\n     * Returns the bitwise OR of this Integer and the specified.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n\n  }, {\n    key: \"or\",\n    value: function or(other) {\n      if (!Integer.isInteger(other)) {\n        other = Integer.fromValue(other);\n      }\n\n      return Integer.fromBits(this.low | other.low, this.high | other.high);\n    }\n    /**\n     * Returns the bitwise XOR of this Integer and the given one.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n\n  }, {\n    key: \"xor\",\n    value: function xor(other) {\n      if (!Integer.isInteger(other)) {\n        other = Integer.fromValue(other);\n      }\n\n      return Integer.fromBits(this.low ^ other.low, this.high ^ other.high);\n    }\n    /**\n     * Returns this Integer with bits shifted to the left by the given amount.\n     * @param {number|!Integer} numBits Number of bits\n     * @returns {!Integer} Shifted Integer\n     * @expose\n     */\n\n  }, {\n    key: \"shiftLeft\",\n    value: function shiftLeft(numBits) {\n      if (Integer.isInteger(numBits)) {\n        numBits = numBits.toInt();\n      }\n\n      if ((numBits &= 63) === 0) {\n        return this;\n      } else if (numBits < 32) {\n        return Integer.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits);\n      } else {\n        return Integer.fromBits(0, this.low << numBits - 32);\n      }\n    }\n    /**\n     * Returns this Integer with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Integer} numBits Number of bits\n     * @returns {!Integer} Shifted Integer\n     * @expose\n     */\n\n  }, {\n    key: \"shiftRight\",\n    value: function shiftRight(numBits) {\n      if (Integer.isInteger(numBits)) {\n        numBits = numBits.toInt();\n      }\n\n      if ((numBits &= 63) === 0) {\n        return this;\n      } else if (numBits < 32) {\n        return Integer.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits);\n      } else {\n        return Integer.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1);\n      }\n    }\n  }]);\n  return Integer;\n}();\n/**\n * An indicator used to reliably determine if an object is a Integer or not.\n * @type {boolean}\n * @const\n * @expose\n * @private\n */\n\n\nInteger.__isInteger__ = true;\nObject.defineProperty(Integer.prototype, '__isInteger__', {\n  value: true,\n  enumerable: false,\n  configurable: false\n});\n/**\n * Tests if the specified object is a Integer.\n * @access private\n * @param {*} obj Object\n * @returns {boolean}\n * @expose\n */\n\nInteger.isInteger = function (obj) {\n  return (obj && obj['__isInteger__']) === true;\n};\n/**\n * A cache of the Integer representations of small integer values.\n * @type {!Object}\n * @inner\n * @private\n */\n\n\nvar INT_CACHE = {};\n/**\n * Returns a Integer representing the given 32 bit integer value.\n * @access private\n * @param {number} value The 32 bit integer in question\n * @returns {!Integer} The corresponding Integer value\n * @expose\n */\n\nInteger.fromInt = function (value) {\n  var obj, cachedObj;\n  value = value | 0;\n\n  if (value >= -128 && value < 128) {\n    cachedObj = INT_CACHE[value];\n\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  obj = new Integer(value, value < 0 ? -1 : 0, false);\n\n  if (value >= -128 && value < 128) {\n    INT_CACHE[value] = obj;\n  }\n\n  return obj;\n};\n/**\n * Returns a Integer representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @access private\n * @param {number} value The number in question\n * @returns {!Integer} The corresponding Integer value\n * @expose\n */\n\n\nInteger.fromNumber = function (value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Integer.ZERO;\n  }\n\n  if (value <= -TWO_PWR_63_DBL) {\n    return Integer.MIN_VALUE;\n  }\n\n  if (value + 1 >= TWO_PWR_63_DBL) {\n    return Integer.MAX_VALUE;\n  }\n\n  if (value < 0) {\n    return Integer.fromNumber(-value).negate();\n  }\n\n  return new Integer(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0);\n};\n/**\n * Returns a Integer representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @access private\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @returns {!Integer} The corresponding Integer value\n * @expose\n */\n\n\nInteger.fromBits = function (lowBits, highBits) {\n  return new Integer(lowBits, highBits);\n};\n/**\n * Returns a Integer representation of the given string, written using the specified radix.\n * @access private\n * @param {string} str The textual representation of the Integer\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Integer} The corresponding Integer value\n * @expose\n */\n\n\nInteger.fromString = function (str, radix) {\n  if (str.length === 0) {\n    throw (0, _error.newError)('number format error: empty string');\n  }\n\n  if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity') {\n    return Integer.ZERO;\n  }\n\n  radix = radix || 10;\n\n  if (radix < 2 || radix > 36) {\n    throw (0, _error.newError)('radix out of range: ' + radix);\n  }\n\n  var p;\n\n  if ((p = str.indexOf('-')) > 0) {\n    throw (0, _error.newError)('number format error: interior \"-\" character: ' + str);\n  } else if (p === 0) {\n    return Integer.fromString(str.substring(1), radix).negate();\n  } // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n\n\n  var radixToPower = Integer.fromNumber(Math.pow(radix, 8));\n  var result = Integer.ZERO;\n\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n\n    if (size < 8) {\n      var power = Integer.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Integer.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Integer.fromNumber(value));\n    }\n  }\n\n  return result;\n};\n/**\n * Converts the specified value to a Integer.\n * @access private\n * @param {!Integer|number|string|!{low: number, high: number}} val Value\n * @returns {!Integer}\n * @expose\n */\n\n\nInteger.fromValue = function (val) {\n  if (val\n  /* is compatible */\n  instanceof Integer) {\n    return val;\n  }\n\n  if (typeof val === 'number') {\n    return Integer.fromNumber(val);\n  }\n\n  if (typeof val === 'string') {\n    return Integer.fromString(val);\n  } // Throws for non-objects, converts non-instanceof Integer:\n\n\n  return new Integer(val.low, val.high);\n};\n/**\n * Converts the specified value to a number.\n * @access private\n * @param {!Integer|number|string|!{low: number, high: number}} val Value\n * @returns {number}\n * @expose\n */\n\n\nInteger.toNumber = function (val) {\n  return Integer.fromValue(val).toNumber();\n};\n/**\n * Converts the specified value to a string.\n * @access private\n * @param {!Integer|number|string|!{low: number, high: number}} val Value\n * @param {number} radix optional radix for string conversion, defaults to 10\n * @returns {String}\n * @expose\n */\n\n\nInteger.toString = function (val, radix) {\n  return Integer.fromValue(val).toString(radix);\n};\n/**\n * Checks if the given value is in the safe range in order to be converted to a native number\n * @access private\n * @param {!Integer|number|string|!{low: number, high: number}} val Value\n * @param {number} radix optional radix for string conversion, defaults to 10\n * @returns {boolean}\n * @expose\n */\n\n\nInteger.inSafeRange = function (val) {\n  return Integer.fromValue(val).inSafeRange();\n};\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\n\n\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Integer}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_24 = Integer.fromInt(TWO_PWR_24_DBL);\n/**\n * Signed zero.\n * @type {!Integer}\n * @expose\n */\n\nInteger.ZERO = Integer.fromInt(0);\n/**\n * Signed one.\n * @type {!Integer}\n * @expose\n */\n\nInteger.ONE = Integer.fromInt(1);\n/**\n * Signed negative one.\n * @type {!Integer}\n * @expose\n */\n\nInteger.NEG_ONE = Integer.fromInt(-1);\n/**\n * Maximum signed value.\n * @type {!Integer}\n * @expose\n */\n\nInteger.MAX_VALUE = Integer.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n/**\n * Minimum signed value.\n * @type {!Integer}\n * @expose\n */\n\nInteger.MIN_VALUE = Integer.fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum safe value.\n * @type {!Integer}\n * @expose\n */\n\nInteger.MIN_SAFE_VALUE = Integer.fromBits(0x1 | 0, 0xffffffffffe00000 | 0);\n/**\n * Maximum safe value.\n * @type {!Integer}\n * @expose\n */\n\nInteger.MAX_SAFE_VALUE = Integer.fromBits(0xffffffff | 0, 0x1fffff | 0);\n/**\n * Cast value to Integer type.\n * @access public\n * @param {Mixed} value - The value to use.\n * @return {Integer} - An object of type Integer.\n */\n\nvar _int = Integer.fromValue;\n/**\n * Check if a variable is of Integer type.\n * @access public\n * @param {Mixed} value - The variable to check.\n * @return {Boolean} - Is it of the Integer type?\n */\n\nexports[\"int\"] = _int;\nvar isInt = Integer.isInteger;\n/**\n * Check if a variable can be safely converted to a number\n * @access public\n * @param {Mixed} value - The variable to check\n * @return {Boolean} - true if it is safe to call toNumber on variable otherwise false\n */\n\nexports.isInt = isInt;\nvar inSafeRange = Integer.inSafeRange;\n/**\n * Converts a variable to a number\n * @access public\n * @param {Mixed} value - The variable to convert\n * @return {number} - the variable as a number\n */\n\nexports.inSafeRange = inSafeRange;\nvar toNumber = Integer.toNumber;\n/**\n * Converts the integer to a string representation\n * @access public\n * @param {Mixed} value - The variable to convert\n * @param {number} radix - radix to use in string conversion, defaults to 10\n * @return {String} - returns a string representation of the integer\n */\n\nexports.toNumber = toNumber;\nvar toString = Integer.toString;\nexports.toString = toString;\nvar _default = Integer;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}