{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _constants = require(\"./constants\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Signature bytes for each request message type\n\n\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\n// eslint-disable-next-line no-unused-vars\n\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\n\nvar RESET = 0x0f; // 0000 1111 // RESET\n\nvar RUN = 0x10; // 0001 0000 // RUN <statement> <parameters>\n// eslint-disable-next-line no-unused-vars\n\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\n\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\n\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\n\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\n\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\n\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\n\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\n\nvar READ_MODE = 'r';\n\nvar RequestMessage =\n/*#__PURE__*/\nfunction () {\n  function RequestMessage(signature, fields, toString) {\n    (0, _classCallCheck2[\"default\"])(this, RequestMessage);\n    this.signature = signature;\n    this.fields = fields;\n    this.toString = toString;\n  }\n  /**\n   * Create a new INIT message.\n   * @param {string} clientName the client name.\n   * @param {object} authToken the authentication token.\n   * @return {RequestMessage} new INIT message.\n   */\n\n\n  (0, _createClass2[\"default\"])(RequestMessage, null, [{\n    key: \"init\",\n    value: function init(clientName, authToken) {\n      return new RequestMessage(INIT, [clientName, authToken], function () {\n        return \"INIT \".concat(clientName, \" {...}\");\n      });\n    }\n    /**\n     * Create a new RUN message.\n     * @param {string} statement the cypher statement.\n     * @param {object} parameters the statement parameters.\n     * @return {RequestMessage} new RUN message.\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(statement, parameters) {\n      return new RequestMessage(RUN, [statement, parameters], function () {\n        return \"RUN \".concat(statement, \" \").concat(JSON.stringify(parameters));\n      });\n    }\n    /**\n     * Get a PULL_ALL message.\n     * @return {RequestMessage} the PULL_ALL message.\n     */\n\n  }, {\n    key: \"pullAll\",\n    value: function pullAll() {\n      return PULL_ALL_MESSAGE;\n    }\n    /**\n     * Get a RESET message.\n     * @return {RequestMessage} the RESET message.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      return RESET_MESSAGE;\n    }\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {object} authToken the authentication token.\n     * @return {RequestMessage} new HELLO message.\n     */\n\n  }, {\n    key: \"hello\",\n    value: function hello(userAgent, authToken) {\n      var metadata = Object.assign({\n        user_agent: userAgent\n      }, authToken);\n      return new RequestMessage(HELLO, [metadata], function () {\n        return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\");\n      });\n    }\n    /**\n     * Create a new BEGIN message.\n     * @param {Bookmark} bookmark the bookmark.\n     * @param {TxConfig} txConfig the configuration.\n     * @param {string} mode the access mode.\n     * @return {RequestMessage} new BEGIN message.\n     */\n\n  }, {\n    key: \"begin\",\n    value: function begin(bookmark, txConfig, mode) {\n      var metadata = buildTxMetadata(bookmark, txConfig, mode);\n      return new RequestMessage(BEGIN, [metadata], function () {\n        return \"BEGIN \".concat(JSON.stringify(metadata));\n      });\n    }\n    /**\n     * Get a COMMIT message.\n     * @return {RequestMessage} the COMMIT message.\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      return COMMIT_MESSAGE;\n    }\n    /**\n     * Get a ROLLBACK message.\n     * @return {RequestMessage} the ROLLBACK message.\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function rollback() {\n      return ROLLBACK_MESSAGE;\n    }\n    /**\n     * Create a new RUN message with additional metadata.\n     * @param {string} statement the cypher statement.\n     * @param {object} parameters the statement parameters.\n     * @param {Bookmark} bookmark the bookmark.\n     * @param {TxConfig} txConfig the configuration.\n     * @param {string} mode the access mode.\n     * @return {RequestMessage} new RUN message with additional metadata.\n     */\n\n  }, {\n    key: \"runWithMetadata\",\n    value: function runWithMetadata(statement, parameters, bookmark, txConfig, mode) {\n      var metadata = buildTxMetadata(bookmark, txConfig, mode);\n      return new RequestMessage(RUN, [statement, parameters, metadata], function () {\n        return \"RUN \".concat(statement, \" \").concat(JSON.stringify(parameters), \" \").concat(JSON.stringify(metadata));\n      });\n    }\n    /**\n     * Get a GOODBYE message.\n     * @return {RequestMessage} the GOODBYE message.\n     */\n\n  }, {\n    key: \"goodbye\",\n    value: function goodbye() {\n      return GOODBYE_MESSAGE;\n    }\n  }]);\n  return RequestMessage;\n}();\n/**\n * Create an object that represent transaction metadata.\n * @param {Bookmark} bookmark the bookmark.\n * @param {TxConfig} txConfig the configuration.\n * @param {string} mode the access mode.\n * @return {object} a metadata object.\n */\n\n\nexports[\"default\"] = RequestMessage;\n\nfunction buildTxMetadata(bookmark, txConfig, mode) {\n  var metadata = {};\n\n  if (!bookmark.isEmpty()) {\n    metadata['bookmarks'] = bookmark.values();\n  }\n\n  if (txConfig.timeout) {\n    metadata['tx_timeout'] = txConfig.timeout;\n  }\n\n  if (txConfig.metadata) {\n    metadata['tx_metadata'] = txConfig.metadata;\n  }\n\n  if (mode === _constants.ACCESS_MODE_READ) {\n    metadata['mode'] = READ_MODE;\n  }\n\n  return metadata;\n} // constants for messages that never change\n\n\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () {\n  return 'PULL_ALL';\n});\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () {\n  return 'RESET';\n});\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () {\n  return 'COMMIT';\n});\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () {\n  return 'ROLLBACK';\n});\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () {\n  return 'GOODBYE';\n});","map":null,"metadata":{},"sourceType":"script"}