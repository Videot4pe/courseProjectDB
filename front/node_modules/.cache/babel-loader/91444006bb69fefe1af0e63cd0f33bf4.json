{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar util = _interopRequireWildcard(require(\"./util\"));\n\nvar _integer = require(\"../integer\");\n\nvar _error = require(\"../error\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Internal holder of the transaction configuration.\n * It performs input validation and value conversion for further serialization by the Bolt protocol layer.\n * Users of the driver provide transaction configuration as regular objects `{timeout: 10, metadata: {key: 'value'}}`.\n * Driver converts such objects to {@link TxConfig} immediately and uses converted values everywhere.\n */\n\n\nvar TxConfig =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {object} config the raw configuration object.\n   */\n  function TxConfig(config) {\n    (0, _classCallCheck2[\"default\"])(this, TxConfig);\n    assertValidConfig(config);\n    this.timeout = extractTimeout(config);\n    this.metadata = extractMetadata(config);\n  }\n  /**\n   * Get an empty config object.\n   * @return {TxConfig} an empty config.\n   */\n\n\n  (0, _createClass2[\"default\"])(TxConfig, [{\n    key: \"isEmpty\",\n\n    /**\n     * Check if this config object is empty. I.e. has no configuration values specified.\n     * @return {boolean} `true` if this object is empty, `false` otherwise.\n     */\n    value: function isEmpty() {\n      return Object.values(this).every(function (value) {\n        return value == null;\n      });\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      return EMPTY_CONFIG;\n    }\n  }]);\n  return TxConfig;\n}();\n\nexports[\"default\"] = TxConfig;\nvar EMPTY_CONFIG = new TxConfig({});\n/**\n * @return {Integer|null}\n */\n\nfunction extractTimeout(config) {\n  if (util.isObject(config) && (config.timeout || config.timeout === 0)) {\n    util.assertNumberOrInteger(config.timeout, 'Transaction timeout');\n    var timeout = (0, _integer[\"int\"])(config.timeout);\n\n    if (timeout.isZero()) {\n      throw (0, _error.newError)('Transaction timeout should not be zero');\n    }\n\n    if (timeout.isNegative()) {\n      throw (0, _error.newError)('Transaction timeout should not be negative');\n    }\n\n    return timeout;\n  }\n\n  return null;\n}\n/**\n * @return {object|null}\n */\n\n\nfunction extractMetadata(config) {\n  if (util.isObject(config) && config.metadata) {\n    var metadata = config.metadata;\n    util.assertObject(metadata);\n\n    if (Object.keys(metadata).length !== 0) {\n      // not an empty object\n      return metadata;\n    }\n  }\n\n  return null;\n}\n\nfunction assertValidConfig(config) {\n  if (config) {\n    util.assertObject(config, 'Transaction config');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}