{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _driver = require(\"../../driver\");\n\nvar _session = _interopRequireDefault(require(\"../../session\"));\n\nvar _util = require(\"../util\");\n\nvar _error = require(\"../../error\");\n\nvar _httpRequestRunner = _interopRequireDefault(require(\"./http-request-runner\"));\n\nvar _connectionHolder = require(\"../connection-holder\");\n\nvar _result = _interopRequireDefault(require(\"../../result\"));\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar HttpSession =\n/*#__PURE__*/\nfunction (_Session) {\n  (0, _inherits2[\"default\"])(HttpSession, _Session);\n\n  function HttpSession(url, authToken, config, sessionTracker) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, HttpSession);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(HttpSession).call(this, _driver.WRITE, null, null, config));\n    _this._ongoingTransactionIds = [];\n    _this._serverInfoSupplier = createServerInfoSupplier(url);\n    _this._requestRunner = new _httpRequestRunner[\"default\"](url, authToken);\n    _this._sessionTracker = sessionTracker;\n\n    _this._sessionTracker.sessionOpened((0, _assertThisInitialized2[\"default\"])(_this));\n\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(HttpSession, [{\n    key: \"run\",\n    value: function run(statement) {\n      var _this2 = this;\n\n      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _validateStatementAnd = (0, _util.validateStatementAndParameters)(statement, parameters),\n          query = _validateStatementAnd.query,\n          params = _validateStatementAnd.params;\n\n      return this._requestRunner.beginTransaction().then(function (transactionId) {\n        _this2._ongoingTransactionIds.push(transactionId);\n\n        var queryPromise = _this2._requestRunner.runQuery(transactionId, query, params);\n\n        return queryPromise.then(function (streamObserver) {\n          if (streamObserver.hasFailed()) {\n            return rollbackTransactionAfterQueryFailure(transactionId, streamObserver, _this2._requestRunner);\n          } else {\n            return commitTransactionAfterQuerySuccess(transactionId, streamObserver, _this2._requestRunner);\n          }\n        }).then(function (streamObserver) {\n          _this2._ongoingTransactionIds = _this2._ongoingTransactionIds.filter(function (id) {\n            return id !== transactionId;\n          });\n          return new _result[\"default\"](streamObserver, query, params, _this2._serverInfoSupplier, _connectionHolder.EMPTY_CONNECTION_HOLDER);\n        });\n      });\n    }\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction() {\n      throwTransactionsNotSupported();\n    }\n  }, {\n    key: \"readTransaction\",\n    value: function readTransaction() {\n      throwTransactionsNotSupported();\n    }\n  }, {\n    key: \"writeTransaction\",\n    value: function writeTransaction() {\n      throwTransactionsNotSupported();\n    }\n  }, {\n    key: \"lastBookmark\",\n    value: function lastBookmark() {\n      throw new _error.Neo4jError('Experimental HTTP driver does not support bookmarks and routing');\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this3 = this;\n\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {\n        return null;\n      };\n\n      var rollbackAllOngoingTransactions = this._ongoingTransactionIds.map(function (transactionId) {\n        return rollbackTransactionSilently(transactionId, _this3._requestRunner);\n      });\n\n      Promise.all(rollbackAllOngoingTransactions).then(function () {\n        _this3._sessionTracker.sessionClosed(_this3);\n\n        callback();\n      });\n    }\n  }]);\n  return HttpSession;\n}(_session[\"default\"]);\n\nexports[\"default\"] = HttpSession;\n\nfunction rollbackTransactionAfterQueryFailure(transactionId, streamObserver, requestRunner) {\n  return rollbackTransactionSilently(transactionId, requestRunner).then(function () {\n    return streamObserver;\n  });\n}\n\nfunction commitTransactionAfterQuerySuccess(transactionId, streamObserver, requestRunner) {\n  return requestRunner.commitTransaction(transactionId)[\"catch\"](function (error) {\n    streamObserver.onError(error);\n  }).then(function () {\n    return streamObserver;\n  });\n}\n\nfunction rollbackTransactionSilently(transactionId, requestRunner) {\n  return requestRunner.rollbackTransaction(transactionId)[\"catch\"](function () {// ignore all rollback errors\n  });\n}\n\nfunction createServerInfoSupplier(url) {\n  return function () {\n    return {\n      server: {\n        address: url.hostAndPort\n      }\n    };\n  };\n}\n\nfunction throwTransactionsNotSupported() {\n  throw new _error.Neo4jError('Experimental HTTP driver does not support transactions');\n}","map":null,"metadata":{},"sourceType":"script"}