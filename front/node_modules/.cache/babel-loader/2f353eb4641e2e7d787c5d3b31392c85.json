{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Structure = exports.Unpacker = exports.Packer = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _node = require(\"./node\");\n\nvar _integer = _interopRequireWildcard(require(\"../integer\"));\n\nvar _error = require(\"./../error\");\n\nvar _graphTypes = require(\"../graph-types\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar TINY_STRING = 0x80;\nvar TINY_LIST = 0x90;\nvar TINY_MAP = 0xa0;\nvar TINY_STRUCT = 0xb0;\nvar NULL = 0xc0;\nvar FLOAT_64 = 0xc1;\nvar FALSE = 0xc2;\nvar TRUE = 0xc3;\nvar INT_8 = 0xc8;\nvar INT_16 = 0xc9;\nvar INT_32 = 0xca;\nvar INT_64 = 0xcb;\nvar STRING_8 = 0xd0;\nvar STRING_16 = 0xd1;\nvar STRING_32 = 0xd2;\nvar LIST_8 = 0xd4;\nvar LIST_16 = 0xd5;\nvar LIST_32 = 0xd6;\nvar BYTES_8 = 0xcc;\nvar BYTES_16 = 0xcd;\nvar BYTES_32 = 0xce;\nvar MAP_8 = 0xd8;\nvar MAP_16 = 0xd9;\nvar MAP_32 = 0xda;\nvar STRUCT_8 = 0xdc;\nvar STRUCT_16 = 0xdd;\nvar NODE = 0x4e;\nvar NODE_STRUCT_SIZE = 3;\nvar RELATIONSHIP = 0x52;\nvar RELATIONSHIP_STRUCT_SIZE = 5;\nvar UNBOUND_RELATIONSHIP = 0x72;\nvar UNBOUND_RELATIONSHIP_STRUCT_SIZE = 3;\nvar PATH = 0x50;\nvar PATH_STRUCT_SIZE = 3;\n/**\n * A Structure have a signature and fields.\n * @access private\n */\n\nvar Structure =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create new instance\n   */\n  function Structure(signature, fields) {\n    (0, _classCallCheck2[\"default\"])(this, Structure);\n    this.signature = signature;\n    this.fields = fields;\n  }\n\n  (0, _createClass2[\"default\"])(Structure, [{\n    key: \"toString\",\n    value: function toString() {\n      var fieldStr = '';\n\n      for (var i = 0; i < this.fields.length; i++) {\n        if (i > 0) {\n          fieldStr += ', ';\n        }\n\n        fieldStr += this.fields[i];\n      }\n\n      return 'Structure(' + this.signature + ', [' + fieldStr + '])';\n    }\n  }]);\n  return Structure;\n}();\n/**\n * Class to pack\n * @access private\n */\n\n\nexports.Structure = Structure;\n\nvar Packer =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {Chunker} channel the chunker backed by a network channel.\n   */\n  function Packer(channel) {\n    (0, _classCallCheck2[\"default\"])(this, Packer);\n    this._ch = channel;\n    this._byteArraysSupported = true;\n  }\n  /**\n   * Creates a packable function out of the provided value\n   * @param x the value to pack\n   * @param onError callback for the case when value cannot be packed\n   * @returns Function\n   */\n\n\n  (0, _createClass2[\"default\"])(Packer, [{\n    key: \"packable\",\n    value: function packable(x, onError) {\n      var _this = this;\n\n      if (x === null) {\n        return function () {\n          return _this._ch.writeUInt8(NULL);\n        };\n      } else if (x === true) {\n        return function () {\n          return _this._ch.writeUInt8(TRUE);\n        };\n      } else if (x === false) {\n        return function () {\n          return _this._ch.writeUInt8(FALSE);\n        };\n      } else if (typeof x === 'number') {\n        return function () {\n          return _this.packFloat(x);\n        };\n      } else if (typeof x === 'string') {\n        return function () {\n          return _this.packString(x, onError);\n        };\n      } else if ((0, _integer.isInt)(x)) {\n        return function () {\n          return _this.packInteger(x);\n        };\n      } else if (x instanceof Int8Array) {\n        return function () {\n          return _this.packBytes(x, onError);\n        };\n      } else if (x instanceof Array) {\n        return function () {\n          _this.packListHeader(x.length, onError);\n\n          for (var _i = 0; _i < x.length; _i++) {\n            _this.packable(x[_i] === undefined ? null : x[_i], onError)();\n          }\n        };\n      } else if (isIterable(x)) {\n        return this.packableIterable(x, onError);\n      } else if (x instanceof _graphTypes.Node) {\n        return this._nonPackableValue(\"It is not allowed to pass nodes in query parameters, given: \".concat(x), onError);\n      } else if (x instanceof _graphTypes.Relationship) {\n        return this._nonPackableValue(\"It is not allowed to pass relationships in query parameters, given: \".concat(x), onError);\n      } else if (x instanceof _graphTypes.Path) {\n        return this._nonPackableValue(\"It is not allowed to pass paths in query parameters, given: \".concat(x), onError);\n      } else if (x instanceof Structure) {\n        var packableFields = [];\n\n        for (var i = 0; i < x.fields.length; i++) {\n          packableFields[i] = this.packable(x.fields[i], onError);\n        }\n\n        return function () {\n          return _this.packStruct(x.signature, packableFields);\n        };\n      } else if ((0, _typeof2[\"default\"])(x) === 'object') {\n        return function () {\n          var keys = Object.keys(x);\n          var count = 0;\n\n          for (var _i2 = 0; _i2 < keys.length; _i2++) {\n            if (x[keys[_i2]] !== undefined) {\n              count++;\n            }\n          }\n\n          _this.packMapHeader(count, onError);\n\n          for (var _i3 = 0; _i3 < keys.length; _i3++) {\n            var key = keys[_i3];\n\n            if (x[key] !== undefined) {\n              _this.packString(key);\n\n              _this.packable(x[key], onError)();\n            }\n          }\n        };\n      } else {\n        return this._nonPackableValue(\"Unable to pack the given value: \".concat(x), onError);\n      }\n    }\n  }, {\n    key: \"packableIterable\",\n    value: function packableIterable(iterable, onError) {\n      try {\n        var array = Array.from(iterable);\n        return this.packable(array, onError);\n      } catch (e) {\n        // handle errors from iterable to array conversion\n        onError((0, _error.newError)(\"Cannot pack given iterable, \".concat(e.message, \": \").concat(iterable)));\n      }\n    }\n    /**\n     * Packs a struct\n     * @param signature the signature of the struct\n     * @param packableFields the fields of the struct, make sure you call `packable on all fields`\n     */\n\n  }, {\n    key: \"packStruct\",\n    value: function packStruct(signature, packableFields, onError) {\n      packableFields = packableFields || [];\n      this.packStructHeader(packableFields.length, signature, onError);\n\n      for (var i = 0; i < packableFields.length; i++) {\n        packableFields[i]();\n      }\n    }\n  }, {\n    key: \"packInteger\",\n    value: function packInteger(x) {\n      var high = x.high;\n      var low = x.low;\n\n      if (x.greaterThanOrEqual(-0x10) && x.lessThan(0x80)) {\n        this._ch.writeInt8(low);\n      } else if (x.greaterThanOrEqual(-0x80) && x.lessThan(-0x10)) {\n        this._ch.writeUInt8(INT_8);\n\n        this._ch.writeInt8(low);\n      } else if (x.greaterThanOrEqual(-0x8000) && x.lessThan(0x8000)) {\n        this._ch.writeUInt8(INT_16);\n\n        this._ch.writeInt16(low);\n      } else if (x.greaterThanOrEqual(-0x80000000) && x.lessThan(0x80000000)) {\n        this._ch.writeUInt8(INT_32);\n\n        this._ch.writeInt32(low);\n      } else {\n        this._ch.writeUInt8(INT_64);\n\n        this._ch.writeInt32(high);\n\n        this._ch.writeInt32(low);\n      }\n    }\n  }, {\n    key: \"packFloat\",\n    value: function packFloat(x) {\n      this._ch.writeUInt8(FLOAT_64);\n\n      this._ch.writeFloat64(x);\n    }\n  }, {\n    key: \"packString\",\n    value: function packString(x, onError) {\n      var bytes = _node.utf8.encode(x);\n\n      var size = bytes.length;\n\n      if (size < 0x10) {\n        this._ch.writeUInt8(TINY_STRING | size);\n\n        this._ch.writeBytes(bytes);\n      } else if (size < 0x100) {\n        this._ch.writeUInt8(STRING_8);\n\n        this._ch.writeUInt8(size);\n\n        this._ch.writeBytes(bytes);\n      } else if (size < 0x10000) {\n        this._ch.writeUInt8(STRING_16);\n\n        this._ch.writeUInt8(size / 256 >> 0);\n\n        this._ch.writeUInt8(size % 256);\n\n        this._ch.writeBytes(bytes);\n      } else if (size < 0x100000000) {\n        this._ch.writeUInt8(STRING_32);\n\n        this._ch.writeUInt8((size / 16777216 >> 0) % 256);\n\n        this._ch.writeUInt8((size / 65536 >> 0) % 256);\n\n        this._ch.writeUInt8((size / 256 >> 0) % 256);\n\n        this._ch.writeUInt8(size % 256);\n\n        this._ch.writeBytes(bytes);\n      } else {\n        onError((0, _error.newError)('UTF-8 strings of size ' + size + ' are not supported'));\n      }\n    }\n  }, {\n    key: \"packListHeader\",\n    value: function packListHeader(size, onError) {\n      if (size < 0x10) {\n        this._ch.writeUInt8(TINY_LIST | size);\n      } else if (size < 0x100) {\n        this._ch.writeUInt8(LIST_8);\n\n        this._ch.writeUInt8(size);\n      } else if (size < 0x10000) {\n        this._ch.writeUInt8(LIST_16);\n\n        this._ch.writeUInt8((size / 256 >> 0) % 256);\n\n        this._ch.writeUInt8(size % 256);\n      } else if (size < 0x100000000) {\n        this._ch.writeUInt8(LIST_32);\n\n        this._ch.writeUInt8((size / 16777216 >> 0) % 256);\n\n        this._ch.writeUInt8((size / 65536 >> 0) % 256);\n\n        this._ch.writeUInt8((size / 256 >> 0) % 256);\n\n        this._ch.writeUInt8(size % 256);\n      } else {\n        onError((0, _error.newError)('Lists of size ' + size + ' are not supported'));\n      }\n    }\n  }, {\n    key: \"packBytes\",\n    value: function packBytes(array, onError) {\n      if (this._byteArraysSupported) {\n        this.packBytesHeader(array.length, onError);\n\n        for (var i = 0; i < array.length; i++) {\n          this._ch.writeInt8(array[i]);\n        }\n      } else {\n        onError((0, _error.newError)('Byte arrays are not supported by the database this driver is connected to'));\n      }\n    }\n  }, {\n    key: \"packBytesHeader\",\n    value: function packBytesHeader(size, onError) {\n      if (size < 0x100) {\n        this._ch.writeUInt8(BYTES_8);\n\n        this._ch.writeUInt8(size);\n      } else if (size < 0x10000) {\n        this._ch.writeUInt8(BYTES_16);\n\n        this._ch.writeUInt8((size / 256 >> 0) % 256);\n\n        this._ch.writeUInt8(size % 256);\n      } else if (size < 0x100000000) {\n        this._ch.writeUInt8(BYTES_32);\n\n        this._ch.writeUInt8((size / 16777216 >> 0) % 256);\n\n        this._ch.writeUInt8((size / 65536 >> 0) % 256);\n\n        this._ch.writeUInt8((size / 256 >> 0) % 256);\n\n        this._ch.writeUInt8(size % 256);\n      } else {\n        onError((0, _error.newError)('Byte arrays of size ' + size + ' are not supported'));\n      }\n    }\n  }, {\n    key: \"packMapHeader\",\n    value: function packMapHeader(size, onError) {\n      if (size < 0x10) {\n        this._ch.writeUInt8(TINY_MAP | size);\n      } else if (size < 0x100) {\n        this._ch.writeUInt8(MAP_8);\n\n        this._ch.writeUInt8(size);\n      } else if (size < 0x10000) {\n        this._ch.writeUInt8(MAP_16);\n\n        this._ch.writeUInt8(size / 256 >> 0);\n\n        this._ch.writeUInt8(size % 256);\n      } else if (size < 0x100000000) {\n        this._ch.writeUInt8(MAP_32);\n\n        this._ch.writeUInt8((size / 16777216 >> 0) % 256);\n\n        this._ch.writeUInt8((size / 65536 >> 0) % 256);\n\n        this._ch.writeUInt8((size / 256 >> 0) % 256);\n\n        this._ch.writeUInt8(size % 256);\n      } else {\n        onError((0, _error.newError)('Maps of size ' + size + ' are not supported'));\n      }\n    }\n  }, {\n    key: \"packStructHeader\",\n    value: function packStructHeader(size, signature, onError) {\n      if (size < 0x10) {\n        this._ch.writeUInt8(TINY_STRUCT | size);\n\n        this._ch.writeUInt8(signature);\n      } else if (size < 0x100) {\n        this._ch.writeUInt8(STRUCT_8);\n\n        this._ch.writeUInt8(size);\n\n        this._ch.writeUInt8(signature);\n      } else if (size < 0x10000) {\n        this._ch.writeUInt8(STRUCT_16);\n\n        this._ch.writeUInt8(size / 256 >> 0);\n\n        this._ch.writeUInt8(size % 256);\n      } else {\n        onError((0, _error.newError)('Structures of size ' + size + ' are not supported'));\n      }\n    }\n  }, {\n    key: \"disableByteArrays\",\n    value: function disableByteArrays() {\n      this._byteArraysSupported = false;\n    }\n  }, {\n    key: \"_nonPackableValue\",\n    value: function _nonPackableValue(message, onError) {\n      if (onError) {\n        onError((0, _error.newError)(message, _error.PROTOCOL_ERROR));\n      }\n\n      return function () {\n        return undefined;\n      };\n    }\n  }]);\n  return Packer;\n}();\n/**\n * Class to unpack\n * @access private\n */\n\n\nexports.Packer = Packer;\n\nvar Unpacker =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {boolean} disableLosslessIntegers if this unpacker should convert all received integers to native JS numbers.\n   */\n  function Unpacker() {\n    var disableLosslessIntegers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    (0, _classCallCheck2[\"default\"])(this, Unpacker);\n    this._disableLosslessIntegers = disableLosslessIntegers;\n  }\n\n  (0, _createClass2[\"default\"])(Unpacker, [{\n    key: \"unpack\",\n    value: function unpack(buffer) {\n      var marker = buffer.readUInt8();\n      var markerHigh = marker & 0xf0;\n      var markerLow = marker & 0x0f;\n\n      if (marker === NULL) {\n        return null;\n      }\n\n      var _boolean = this._unpackBoolean(marker);\n\n      if (_boolean !== null) {\n        return _boolean;\n      }\n\n      var numberOrInteger = this._unpackNumberOrInteger(marker, buffer);\n\n      if (numberOrInteger !== null) {\n        if (this._disableLosslessIntegers && (0, _integer.isInt)(numberOrInteger)) {\n          return numberOrInteger.toNumberOrInfinity();\n        }\n\n        return numberOrInteger;\n      }\n\n      var string = this._unpackString(marker, markerHigh, markerLow, buffer);\n\n      if (string !== null) {\n        return string;\n      }\n\n      var list = this._unpackList(marker, markerHigh, markerLow, buffer);\n\n      if (list !== null) {\n        return list;\n      }\n\n      var byteArray = this._unpackByteArray(marker, buffer);\n\n      if (byteArray !== null) {\n        return byteArray;\n      }\n\n      var map = this._unpackMap(marker, markerHigh, markerLow, buffer);\n\n      if (map !== null) {\n        return map;\n      }\n\n      var struct = this._unpackStruct(marker, markerHigh, markerLow, buffer);\n\n      if (struct !== null) {\n        return struct;\n      }\n\n      throw (0, _error.newError)('Unknown packed value with marker ' + marker.toString(16));\n    }\n  }, {\n    key: \"unpackInteger\",\n    value: function unpackInteger(buffer) {\n      var marker = buffer.readUInt8();\n\n      var result = this._unpackInteger(marker, buffer);\n\n      if (result == null) {\n        throw (0, _error.newError)('Unable to unpack integer value with marker ' + marker.toString(16));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_unpackBoolean\",\n    value: function _unpackBoolean(marker) {\n      if (marker === TRUE) {\n        return true;\n      } else if (marker === FALSE) {\n        return false;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"_unpackNumberOrInteger\",\n    value: function _unpackNumberOrInteger(marker, buffer) {\n      if (marker === FLOAT_64) {\n        return buffer.readFloat64();\n      } else {\n        return this._unpackInteger(marker, buffer);\n      }\n    }\n  }, {\n    key: \"_unpackInteger\",\n    value: function _unpackInteger(marker, buffer) {\n      if (marker >= 0 && marker < 128) {\n        return (0, _integer[\"int\"])(marker);\n      } else if (marker >= 240 && marker < 256) {\n        return (0, _integer[\"int\"])(marker - 256);\n      } else if (marker === INT_8) {\n        return (0, _integer[\"int\"])(buffer.readInt8());\n      } else if (marker === INT_16) {\n        return (0, _integer[\"int\"])(buffer.readInt16());\n      } else if (marker === INT_32) {\n        var b = buffer.readInt32();\n        return (0, _integer[\"int\"])(b);\n      } else if (marker === INT_64) {\n        var high = buffer.readInt32();\n        var low = buffer.readInt32();\n        return new _integer[\"default\"](low, high);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"_unpackString\",\n    value: function _unpackString(marker, markerHigh, markerLow, buffer) {\n      if (markerHigh === TINY_STRING) {\n        return _node.utf8.decode(buffer, markerLow);\n      } else if (marker === STRING_8) {\n        return _node.utf8.decode(buffer, buffer.readUInt8());\n      } else if (marker === STRING_16) {\n        return _node.utf8.decode(buffer, buffer.readUInt16());\n      } else if (marker === STRING_32) {\n        return _node.utf8.decode(buffer, buffer.readUInt32());\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"_unpackList\",\n    value: function _unpackList(marker, markerHigh, markerLow, buffer) {\n      if (markerHigh === TINY_LIST) {\n        return this._unpackListWithSize(markerLow, buffer);\n      } else if (marker === LIST_8) {\n        return this._unpackListWithSize(buffer.readUInt8(), buffer);\n      } else if (marker === LIST_16) {\n        return this._unpackListWithSize(buffer.readUInt16(), buffer);\n      } else if (marker === LIST_32) {\n        return this._unpackListWithSize(buffer.readUInt32(), buffer);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"_unpackListWithSize\",\n    value: function _unpackListWithSize(size, buffer) {\n      var value = [];\n\n      for (var i = 0; i < size; i++) {\n        value.push(this.unpack(buffer));\n      }\n\n      return value;\n    }\n  }, {\n    key: \"_unpackByteArray\",\n    value: function _unpackByteArray(marker, buffer) {\n      if (marker === BYTES_8) {\n        return this._unpackByteArrayWithSize(buffer.readUInt8(), buffer);\n      } else if (marker === BYTES_16) {\n        return this._unpackByteArrayWithSize(buffer.readUInt16(), buffer);\n      } else if (marker === BYTES_32) {\n        return this._unpackByteArrayWithSize(buffer.readUInt32(), buffer);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"_unpackByteArrayWithSize\",\n    value: function _unpackByteArrayWithSize(size, buffer) {\n      var value = new Int8Array(size);\n\n      for (var i = 0; i < size; i++) {\n        value[i] = buffer.readInt8();\n      }\n\n      return value;\n    }\n  }, {\n    key: \"_unpackMap\",\n    value: function _unpackMap(marker, markerHigh, markerLow, buffer) {\n      if (markerHigh === TINY_MAP) {\n        return this._unpackMapWithSize(markerLow, buffer);\n      } else if (marker === MAP_8) {\n        return this._unpackMapWithSize(buffer.readUInt8(), buffer);\n      } else if (marker === MAP_16) {\n        return this._unpackMapWithSize(buffer.readUInt16(), buffer);\n      } else if (marker === MAP_32) {\n        return this._unpackMapWithSize(buffer.readUInt32(), buffer);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"_unpackMapWithSize\",\n    value: function _unpackMapWithSize(size, buffer) {\n      var value = {};\n\n      for (var i = 0; i < size; i++) {\n        var key = this.unpack(buffer);\n        value[key] = this.unpack(buffer);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"_unpackStruct\",\n    value: function _unpackStruct(marker, markerHigh, markerLow, buffer) {\n      if (markerHigh === TINY_STRUCT) {\n        return this._unpackStructWithSize(markerLow, buffer);\n      } else if (marker === STRUCT_8) {\n        return this._unpackStructWithSize(buffer.readUInt8(), buffer);\n      } else if (marker === STRUCT_16) {\n        return this._unpackStructWithSize(buffer.readUInt16(), buffer);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"_unpackStructWithSize\",\n    value: function _unpackStructWithSize(structSize, buffer) {\n      var signature = buffer.readUInt8();\n\n      if (signature === NODE) {\n        return this._unpackNode(structSize, buffer);\n      } else if (signature === RELATIONSHIP) {\n        return this._unpackRelationship(structSize, buffer);\n      } else if (signature === UNBOUND_RELATIONSHIP) {\n        return this._unpackUnboundRelationship(structSize, buffer);\n      } else if (signature === PATH) {\n        return this._unpackPath(structSize, buffer);\n      } else {\n        return this._unpackUnknownStruct(signature, structSize, buffer);\n      }\n    }\n  }, {\n    key: \"_unpackNode\",\n    value: function _unpackNode(structSize, buffer) {\n      this._verifyStructSize('Node', NODE_STRUCT_SIZE, structSize);\n\n      return new _graphTypes.Node(this.unpack(buffer), // Identity\n      this.unpack(buffer), // Labels\n      this.unpack(buffer) // Properties\n      );\n    }\n  }, {\n    key: \"_unpackRelationship\",\n    value: function _unpackRelationship(structSize, buffer) {\n      this._verifyStructSize('Relationship', RELATIONSHIP_STRUCT_SIZE, structSize);\n\n      return new _graphTypes.Relationship(this.unpack(buffer), // Identity\n      this.unpack(buffer), // Start Node Identity\n      this.unpack(buffer), // End Node Identity\n      this.unpack(buffer), // Type\n      this.unpack(buffer) // Properties\n      );\n    }\n  }, {\n    key: \"_unpackUnboundRelationship\",\n    value: function _unpackUnboundRelationship(structSize, buffer) {\n      this._verifyStructSize('UnboundRelationship', UNBOUND_RELATIONSHIP_STRUCT_SIZE, structSize);\n\n      return new _graphTypes.UnboundRelationship(this.unpack(buffer), // Identity\n      this.unpack(buffer), // Type\n      this.unpack(buffer) // Properties\n      );\n    }\n  }, {\n    key: \"_unpackPath\",\n    value: function _unpackPath(structSize, buffer) {\n      this._verifyStructSize('Path', PATH_STRUCT_SIZE, structSize);\n\n      var nodes = this.unpack(buffer);\n      var rels = this.unpack(buffer);\n      var sequence = this.unpack(buffer);\n      var segments = [];\n      var prevNode = nodes[0];\n\n      for (var i = 0; i < sequence.length; i += 2) {\n        var nextNode = nodes[sequence[i + 1]];\n        var relIndex = sequence[i];\n        var rel = void 0;\n\n        if (relIndex > 0) {\n          rel = rels[relIndex - 1];\n\n          if (rel instanceof _graphTypes.UnboundRelationship) {\n            // To avoid duplication, relationships in a path do not contain\n            // information about their start and end nodes, that's instead\n            // inferred from the path sequence. This is us inferring (and,\n            // for performance reasons remembering) the start/end of a rel.\n            rels[relIndex - 1] = rel = rel.bind(prevNode.identity, nextNode.identity);\n          }\n        } else {\n          rel = rels[-relIndex - 1];\n\n          if (rel instanceof _graphTypes.UnboundRelationship) {\n            // See above\n            rels[-relIndex - 1] = rel = rel.bind(nextNode.identity, prevNode.identity);\n          }\n        } // Done hydrating one path segment.\n\n\n        segments.push(new _graphTypes.PathSegment(prevNode, rel, nextNode));\n        prevNode = nextNode;\n      }\n\n      return new _graphTypes.Path(nodes[0], nodes[nodes.length - 1], segments);\n    }\n  }, {\n    key: \"_unpackUnknownStruct\",\n    value: function _unpackUnknownStruct(signature, structSize, buffer) {\n      var result = new Structure(signature, []);\n\n      for (var i = 0; i < structSize; i++) {\n        result.fields.push(this.unpack(buffer));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_verifyStructSize\",\n    value: function _verifyStructSize(structName, expectedSize, actualSize) {\n      if (expectedSize !== actualSize) {\n        throw (0, _error.newError)(\"Wrong struct size for \".concat(structName, \", expected \").concat(expectedSize, \" but was \").concat(actualSize), _error.PROTOCOL_ERROR);\n      }\n    }\n  }]);\n  return Unpacker;\n}();\n\nexports.Unpacker = Unpacker;\n\nfunction isIterable(obj) {\n  if (obj == null) {\n    return false;\n  }\n\n  return typeof obj[Symbol.iterator] === 'function';\n}","map":null,"metadata":{},"sourceType":"script"}