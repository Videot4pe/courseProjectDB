{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEmptyObjectOrNull = isEmptyObjectOrNull;\nexports.isObject = isObject;\nexports.isString = isString;\nexports.assertObject = assertObject;\nexports.assertString = assertString;\nexports.assertNumber = assertNumber;\nexports.assertNumberOrInteger = assertNumberOrInteger;\nexports.assertValidDate = assertValidDate;\nexports.validateStatementAndParameters = validateStatementAndParameters;\nexports.ENCRYPTION_OFF = exports.ENCRYPTION_ON = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _integer = require(\"../integer\");\n/**\n * Copyright (c) 2002-2019 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar ENCRYPTION_ON = 'ENCRYPTION_ON';\nexports.ENCRYPTION_ON = ENCRYPTION_ON;\nvar ENCRYPTION_OFF = 'ENCRYPTION_OFF';\nexports.ENCRYPTION_OFF = ENCRYPTION_OFF;\n\nfunction isEmptyObjectOrNull(obj) {\n  if (obj === null) {\n    return true;\n  }\n\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isObject(obj) {\n  return (0, _typeof2[\"default\"])(obj) === 'object' && !Array.isArray(obj) && obj !== null;\n}\n/**\n * Check and normalize given statement and parameters.\n * @param {string|{text: string, parameters: object}} statement the statement to check.\n * @param {object} parameters\n * @return {{query: string, params: object}} the normalized query with parameters.\n * @throws TypeError when either given query or parameters are invalid.\n */\n\n\nfunction validateStatementAndParameters(statement, parameters) {\n  var query = statement;\n  var params = parameters || {};\n\n  if ((0, _typeof2[\"default\"])(statement) === 'object' && statement.text) {\n    query = statement.text;\n    params = statement.parameters || {};\n  }\n\n  assertCypherStatement(query);\n  assertQueryParameters(params);\n  return {\n    query: query,\n    params: params\n  };\n}\n\nfunction assertObject(obj, objName) {\n  if (!isObject(obj)) {\n    throw new TypeError(objName + ' expected to be an object but was: ' + JSON.stringify(obj));\n  }\n\n  return obj;\n}\n\nfunction assertString(obj, objName) {\n  if (!isString(obj)) {\n    throw new TypeError(objName + ' expected to be string but was: ' + JSON.stringify(obj));\n  }\n\n  return obj;\n}\n\nfunction assertNumber(obj, objName) {\n  if (typeof obj !== 'number') {\n    throw new TypeError(objName + ' expected to be a number but was: ' + JSON.stringify(obj));\n  }\n\n  return obj;\n}\n\nfunction assertNumberOrInteger(obj, objName) {\n  if (typeof obj !== 'number' && !(0, _integer.isInt)(obj)) {\n    throw new TypeError(objName + ' expected to be either a number or an Integer object but was: ' + JSON.stringify(obj));\n  }\n\n  return obj;\n}\n\nfunction assertValidDate(obj, objName) {\n  if (Object.prototype.toString.call(obj) !== '[object Date]') {\n    throw new TypeError(objName + ' expected to be a standard JavaScript Date but was: ' + JSON.stringify(obj));\n  }\n\n  if (Number.isNaN(obj.getTime())) {\n    throw new TypeError(objName + ' expected to be valid JavaScript Date but its time was NaN: ' + JSON.stringify(obj));\n  }\n\n  return obj;\n}\n\nfunction assertCypherStatement(obj) {\n  assertString(obj, 'Cypher statement');\n\n  if (obj.trim().length === 0) {\n    throw new TypeError('Cypher statement is expected to be a non-empty string.');\n  }\n}\n\nfunction assertQueryParameters(obj) {\n  if (!isObject(obj)) {\n    // objects created with `Object.create(null)` do not have a constructor property\n    var _constructor = obj.constructor ? ' ' + obj.constructor.name : '';\n\n    throw new TypeError(\"Query parameters are expected to either be undefined/null or an object, given:\".concat(_constructor, \" \").concat(obj));\n  }\n}\n\nfunction isString(str) {\n  return Object.prototype.toString.call(str) === '[object String]';\n}","map":null,"metadata":{},"sourceType":"script"}